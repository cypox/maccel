-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity macc_par_convs is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_EN_A : OUT STD_LOGIC;
    A_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    A_V_Clk_A : OUT STD_LOGIC;
    A_V_Rst_A : OUT STD_LOGIC;
    A_V_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_EN_B : OUT STD_LOGIC;
    A_V_WEN_B : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_V_Din_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_V_Dout_B : IN STD_LOGIC_VECTOR (7 downto 0);
    A_V_Clk_B : OUT STD_LOGIC;
    A_V_Rst_B : OUT STD_LOGIC;
    B_0_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_0_V_EN_A : OUT STD_LOGIC;
    B_0_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_0_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_0_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_0_V_Clk_A : OUT STD_LOGIC;
    B_0_V_Rst_A : OUT STD_LOGIC;
    B_1_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_V_EN_A : OUT STD_LOGIC;
    B_1_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_1_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_1_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_1_V_Clk_A : OUT STD_LOGIC;
    B_1_V_Rst_A : OUT STD_LOGIC;
    B_2_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_2_V_EN_A : OUT STD_LOGIC;
    B_2_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_2_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_2_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_2_V_Clk_A : OUT STD_LOGIC;
    B_2_V_Rst_A : OUT STD_LOGIC;
    B_3_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_3_V_EN_A : OUT STD_LOGIC;
    B_3_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_3_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_3_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_3_V_Clk_A : OUT STD_LOGIC;
    B_3_V_Rst_A : OUT STD_LOGIC;
    B_4_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_4_V_EN_A : OUT STD_LOGIC;
    B_4_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_4_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_4_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_4_V_Clk_A : OUT STD_LOGIC;
    B_4_V_Rst_A : OUT STD_LOGIC;
    B_5_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_5_V_EN_A : OUT STD_LOGIC;
    B_5_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_5_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_5_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_5_V_Clk_A : OUT STD_LOGIC;
    B_5_V_Rst_A : OUT STD_LOGIC;
    B_6_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_6_V_EN_A : OUT STD_LOGIC;
    B_6_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_6_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_6_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_6_V_Clk_A : OUT STD_LOGIC;
    B_6_V_Rst_A : OUT STD_LOGIC;
    B_7_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_7_V_EN_A : OUT STD_LOGIC;
    B_7_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_7_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_7_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_7_V_Clk_A : OUT STD_LOGIC;
    B_7_V_Rst_A : OUT STD_LOGIC;
    B_8_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_8_V_EN_A : OUT STD_LOGIC;
    B_8_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_8_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_8_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_8_V_Clk_A : OUT STD_LOGIC;
    B_8_V_Rst_A : OUT STD_LOGIC;
    B_9_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_9_V_EN_A : OUT STD_LOGIC;
    B_9_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_9_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_9_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_9_V_Clk_A : OUT STD_LOGIC;
    B_9_V_Rst_A : OUT STD_LOGIC;
    B_10_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_10_V_EN_A : OUT STD_LOGIC;
    B_10_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_10_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_10_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_10_V_Clk_A : OUT STD_LOGIC;
    B_10_V_Rst_A : OUT STD_LOGIC;
    B_11_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_11_V_EN_A : OUT STD_LOGIC;
    B_11_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_11_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_11_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_11_V_Clk_A : OUT STD_LOGIC;
    B_11_V_Rst_A : OUT STD_LOGIC;
    B_12_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_12_V_EN_A : OUT STD_LOGIC;
    B_12_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_12_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_12_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_12_V_Clk_A : OUT STD_LOGIC;
    B_12_V_Rst_A : OUT STD_LOGIC;
    B_13_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_13_V_EN_A : OUT STD_LOGIC;
    B_13_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_13_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_13_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_13_V_Clk_A : OUT STD_LOGIC;
    B_13_V_Rst_A : OUT STD_LOGIC;
    B_14_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_14_V_EN_A : OUT STD_LOGIC;
    B_14_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_14_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_14_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_14_V_Clk_A : OUT STD_LOGIC;
    B_14_V_Rst_A : OUT STD_LOGIC;
    B_15_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_15_V_EN_A : OUT STD_LOGIC;
    B_15_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_15_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_15_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_15_V_Clk_A : OUT STD_LOGIC;
    B_15_V_Rst_A : OUT STD_LOGIC;
    B_16_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_16_V_EN_A : OUT STD_LOGIC;
    B_16_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_16_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_16_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_16_V_Clk_A : OUT STD_LOGIC;
    B_16_V_Rst_A : OUT STD_LOGIC;
    B_17_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_17_V_EN_A : OUT STD_LOGIC;
    B_17_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_17_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_17_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_17_V_Clk_A : OUT STD_LOGIC;
    B_17_V_Rst_A : OUT STD_LOGIC;
    B_18_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_18_V_EN_A : OUT STD_LOGIC;
    B_18_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_18_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_18_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_18_V_Clk_A : OUT STD_LOGIC;
    B_18_V_Rst_A : OUT STD_LOGIC;
    B_19_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_19_V_EN_A : OUT STD_LOGIC;
    B_19_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_19_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_19_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_19_V_Clk_A : OUT STD_LOGIC;
    B_19_V_Rst_A : OUT STD_LOGIC;
    B_20_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_20_V_EN_A : OUT STD_LOGIC;
    B_20_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_20_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_20_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_20_V_Clk_A : OUT STD_LOGIC;
    B_20_V_Rst_A : OUT STD_LOGIC;
    B_21_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_21_V_EN_A : OUT STD_LOGIC;
    B_21_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_21_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_21_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_21_V_Clk_A : OUT STD_LOGIC;
    B_21_V_Rst_A : OUT STD_LOGIC;
    B_22_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_22_V_EN_A : OUT STD_LOGIC;
    B_22_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_22_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_22_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_22_V_Clk_A : OUT STD_LOGIC;
    B_22_V_Rst_A : OUT STD_LOGIC;
    B_23_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_23_V_EN_A : OUT STD_LOGIC;
    B_23_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_23_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_23_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_23_V_Clk_A : OUT STD_LOGIC;
    B_23_V_Rst_A : OUT STD_LOGIC;
    B_24_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_24_V_EN_A : OUT STD_LOGIC;
    B_24_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_24_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_24_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_24_V_Clk_A : OUT STD_LOGIC;
    B_24_V_Rst_A : OUT STD_LOGIC;
    B_25_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_25_V_EN_A : OUT STD_LOGIC;
    B_25_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_25_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_25_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_25_V_Clk_A : OUT STD_LOGIC;
    B_25_V_Rst_A : OUT STD_LOGIC;
    B_26_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_26_V_EN_A : OUT STD_LOGIC;
    B_26_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_26_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_26_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    B_26_V_Clk_A : OUT STD_LOGIC;
    B_26_V_Rst_A : OUT STD_LOGIC;
    C_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_V_EN_A : OUT STD_LOGIC;
    C_V_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_V_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_V_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    C_V_Clk_A : OUT STD_LOGIC;
    C_V_Rst_A : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of macc_par_convs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "macc_par_convs,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.406000,HLS_SYN_LAT=22079899,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=628,HLS_SYN_LUT=1550}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_DE : STD_LOGIC_VECTOR (15 downto 0) := "0000000011011110";
    constant ap_const_lv8_DE : STD_LOGIC_VECTOR (7 downto 0) := "11011110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_E0 : STD_LOGIC_VECTOR (8 downto 0) := "011100000";
    constant ap_const_lv9_E1 : STD_LOGIC_VECTOR (8 downto 0) := "011100001";
    constant ap_const_lv9_E2 : STD_LOGIC_VECTOR (8 downto 0) := "011100010";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv10_1C1 : STD_LOGIC_VECTOR (9 downto 0) := "0111000001";
    constant ap_const_lv10_1C2 : STD_LOGIC_VECTOR (9 downto 0) := "0111000010";
    constant ap_const_lv13_1BC0 : STD_LOGIC_VECTOR (12 downto 0) := "1101111000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv18_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_const_lv21_C084 : STD_LOGIC_VECTOR (20 downto 0) := "000001100000010000100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal indvar_flatten_reg_747 : STD_LOGIC_VECTOR (12 downto 0);
    signal shift_y_reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal channel_out_reg_769 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_fu_780_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_2372 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal center_x_fu_792_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal center_x_reg_2381 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_x_coords_cast_fu_806_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal output_x_coords_cast_reg_2386 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_834_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_reg_2391 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_0_1_fu_864_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_0_1_reg_2396 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_0_2_fu_900_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_0_2_reg_2401 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_fu_932_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_reg_2406 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_1_fu_964_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_1_reg_2411 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_2_fu_996_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_1_2_reg_2416 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_2_fu_1028_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_2_reg_2421 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_2_1_fu_1060_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_2_1_reg_2426 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_2_2_fu_1092_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_2_2_reg_2431 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_flatten_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2436 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_1104_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next_reg_2440 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal shift_y_cast6_mid2_v_fu_1130_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_y_cast6_mid2_v_reg_2445 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_mid2_v_v_fu_1146_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_mid2_v_v_reg_2451 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_1_mid2_v_v_fu_1175_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_1_mid2_v_v_reg_2456 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_2_mid2_v_v_fu_1180_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_2_mid2_v_v_reg_2463 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_mid2_v_fu_1185_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_mid2_v_reg_2470 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_1_mid2_v_fu_1190_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_1_mid2_v_reg_2477 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_2_mid2_v_fu_1195_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_2_mid2_v_reg_2484 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_coords_fu_1204_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of output_coords_fu_1204_p2 : signal is "no";
    signal output_coords_reg_2491 : STD_LOGIC_VECTOR (20 downto 0);
    signal channel_out1_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal channel_out1_reg_2501 : STD_LOGIC_VECTOR (63 downto 0);
    signal channel_out_1_fu_1214_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal channel_out_1_reg_2545 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_4_reg_2560 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_8_reg_2585 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_10_reg_2610 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_12_reg_2635 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_14_reg_2660 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_16_reg_2685 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal tmp_18_reg_2710 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_20_reg_2735 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_2_mid2_v_fu_1773_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_mid2_v_reg_2750 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal tmp_14_2_1_mid2_v_fu_1794_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_1_mid2_v_reg_2755 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_2_mid2_v_fu_1799_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_2_mid2_v_reg_2762 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_22_reg_2779 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal B_20_V_load_reg_2834 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_2839 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_21_V_load_reg_2849 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_22_V_load_reg_2854 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_23_V_load_reg_2859 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_24_V_load_reg_2864 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_25_V_load_reg_2869 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_26_V_load_reg_2874 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal tmp_26_reg_2884 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state15_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal tmp_28_reg_2899 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state16_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal tmp_30_reg_2914 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal shift_x_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_x_coords_reg_736 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_phi_fu_751_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal shift_y_phi_fu_762_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal channel_out_phi_fu_773_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_mid2_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_0_1_mid2_fu_1170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_0_2_mid2_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_14_0_1_mid2_fu_1237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_1_1_mid2_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_14_0_1_2_mid2_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_2_mid2_fu_1371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_14_0_2_1_mid2_fu_1385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_2_2_mid2_fu_1448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_14_1_mid2_fu_1453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_1_0_1_mid2_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_14_1_0_2_mid2_fu_1521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_1_1_mid2_fu_1575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal tmp_14_1_1_1_mid2_fu_1584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_1_1_2_mid2_fu_1643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal tmp_14_1_2_mid2_fu_1648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_1_2_1_mid2_fu_1706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal tmp_14_1_2_2_mid2_fu_1716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_mid2_fu_1778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal tmp_14_2_0_1_mid2_fu_1789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_0_2_mid2_fu_1858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal tmp_14_2_1_mid2_fu_1863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_1_1_mid2_fu_1921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal tmp_14_2_1_2_mid2_fu_1931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_2_mid2_fu_1983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal tmp_14_2_2_1_mid2_fu_1992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_2_2_mid2_fu_2049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal tmp_7_fu_2125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_8_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_9_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_10_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_11_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_12_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_13_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_14_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_15_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_16_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_17_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_18_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_19_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_20_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_21_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_22_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_23_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_24_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_25_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_26_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal C_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_810_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_fu_822_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl13_cast_fu_818_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_cast_fu_830_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl13_0_1_fu_840_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl14_0_1_fu_852_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl13_0_1_cast_fu_848_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_0_1_cast_fu_860_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_0_2_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl13_0_2_fu_876_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl14_0_2_fu_888_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl13_0_2_cast_fu_884_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_0_2_cast_fu_896_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shift_x_cast_fu_802_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_1_fu_906_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_1_fu_920_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl13_1_fu_912_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_1_cast_fu_928_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_1_1_fu_938_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_1_1_fu_952_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl13_1_1_fu_944_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_1_1_cast_fu_960_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_1_2_fu_970_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_1_2_fu_984_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl13_1_2_fu_976_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl14_1_2_cast_fu_992_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shift_x_cast1_fu_798_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_2_fu_1002_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_2_fu_1016_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl13_2_fu_1008_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl14_2_cast_fu_1024_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_2_1_fu_1034_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_2_1_fu_1048_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl13_2_1_fu_1040_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl14_2_1_cast_fu_1056_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_8_2_2_fu_1066_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_2_2_fu_1080_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl13_2_2_fu_1072_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl14_2_2_cast_fu_1088_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal center_y_fu_1124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_mid2_v_v_v_fu_1142_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_mid2_v_fu_1151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_0_1_mid2_v_s_fu_1160_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_0_1_mid2_v_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal channel_out_mid2_fu_1116_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2129_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_14_0_0_2_mid2_v_s_fu_1220_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_0_2_mid2_v_fu_1225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_1_mid2_v_fu_1234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_1250_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_1250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_1250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_1264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2138_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_0_1_1_mid2_v_s_fu_1291_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_1_1_mid2_v_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_1_2_mid2_v_s_fu_1305_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_1_2_mid2_v_fu_1310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2147_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_1342_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2156_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_0_2_mid2_v_fu_1368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_2_1_mid2_v_s_fu_1376_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_2_1_mid2_v_fu_1381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2165_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_1413_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2174_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_0_2_2_mid2_v_s_fu_1439_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_0_2_2_mid2_v_fu_1444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2183_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_1480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2192_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_1_0_1_mid2_v_fu_1506_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_0_2_mid2_v_fu_1516_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2201_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_1549_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2210_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_1_1_1_mid2_v_fu_1579_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2219_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_1612_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2228_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_1_1_2_mid2_v_fu_1638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2237_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_1675_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2246_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_1_2_1_mid2_v_fu_1701_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_1_2_2_mid2_v_fu_1711_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2255_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_1744_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2264_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_2_mid2_v_v_fu_1770_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_0_1_mid2_v_fu_1783_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2273_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_1827_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2282_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_2_0_2_mid2_v_fu_1853_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2291_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_1890_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2300_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_2_1_1_mid2_v_fu_1916_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_2_1_2_mid2_v_fu_1926_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2309_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_fu_1957_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2318_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_2_2_1_mid2_v_fu_1987_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2327_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_2018_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2336_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_2_2_2_mid2_v_fu_2044_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_2345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_2075_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2354_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2363_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2129_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2129_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2138_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2147_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2156_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2165_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2174_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2192_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2201_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2210_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2219_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2228_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2237_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2246_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2255_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2264_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2273_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2300_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2309_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2318_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2327_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2336_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2354_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_2129_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2129_p20 : STD_LOGIC_VECTOR (20 downto 0);

    component macc_par_convs_mabkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component macc_par_convs_macud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component macc_par_convs_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    macc_par_convs_CTRL_BUS_s_axi_U : component macc_par_convs_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    macc_par_convs_mabkb_U1 : component macc_par_convs_mabkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 17,
        din2_WIDTH => 8,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_2129_p0,
        din1 => grp_fu_2129_p1,
        din2 => grp_fu_2129_p2,
        dout => grp_fu_2129_p3);

    macc_par_convs_macud_U2 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_1_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2138_p2,
        dout => grp_fu_2138_p3);

    macc_par_convs_macud_U3 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_2_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2147_p2,
        dout => grp_fu_2147_p3);

    macc_par_convs_macud_U4 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_3_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2156_p2,
        dout => grp_fu_2156_p3);

    macc_par_convs_macud_U5 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_4_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2165_p2,
        dout => grp_fu_2165_p3);

    macc_par_convs_macud_U6 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_5_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2174_p2,
        dout => grp_fu_2174_p3);

    macc_par_convs_macud_U7 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_6_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2183_p2,
        dout => grp_fu_2183_p3);

    macc_par_convs_macud_U8 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_7_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2192_p2,
        dout => grp_fu_2192_p3);

    macc_par_convs_macud_U9 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_8_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2201_p2,
        dout => grp_fu_2201_p3);

    macc_par_convs_macud_U10 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_9_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2210_p2,
        dout => grp_fu_2210_p3);

    macc_par_convs_macud_U11 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_10_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2219_p2,
        dout => grp_fu_2219_p3);

    macc_par_convs_macud_U12 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_11_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2228_p2,
        dout => grp_fu_2228_p3);

    macc_par_convs_macud_U13 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_12_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2237_p2,
        dout => grp_fu_2237_p3);

    macc_par_convs_macud_U14 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_13_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2246_p2,
        dout => grp_fu_2246_p3);

    macc_par_convs_macud_U15 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_14_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2255_p2,
        dout => grp_fu_2255_p3);

    macc_par_convs_macud_U16 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_15_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2264_p2,
        dout => grp_fu_2264_p3);

    macc_par_convs_macud_U17 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_16_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2273_p2,
        dout => grp_fu_2273_p3);

    macc_par_convs_macud_U18 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_17_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2282_p2,
        dout => grp_fu_2282_p3);

    macc_par_convs_macud_U19 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_18_V_Dout_A,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2291_p2,
        dout => grp_fu_2291_p3);

    macc_par_convs_macud_U20 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_19_V_Dout_A,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2300_p2,
        dout => grp_fu_2300_p3);

    macc_par_convs_macud_U21 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_20_V_load_reg_2834,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2309_p2,
        dout => grp_fu_2309_p3);

    macc_par_convs_macud_U22 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_21_V_load_reg_2849,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2318_p2,
        dout => grp_fu_2318_p3);

    macc_par_convs_macud_U23 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_22_V_load_reg_2854,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2327_p2,
        dout => grp_fu_2327_p3);

    macc_par_convs_macud_U24 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_23_V_load_reg_2859,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2336_p2,
        dout => grp_fu_2336_p3);

    macc_par_convs_macud_U25 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_24_V_load_reg_2864,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2345_p2,
        dout => grp_fu_2345_p3);

    macc_par_convs_macud_U26 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_25_V_load_reg_2869,
        din1 => A_V_Dout_B,
        din2 => grp_fu_2354_p2,
        dout => grp_fu_2354_p3);

    macc_par_convs_macud_U27 : component macc_par_convs_macud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => B_26_V_load_reg_2874,
        din1 => A_V_Dout_A,
        din2 => grp_fu_2363_p2,
        dout => grp_fu_2363_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13_subdone = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13_subdone = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    channel_out_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                channel_out_reg_769 <= channel_out_1_reg_2545;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then 
                channel_out_reg_769 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_747 <= indvar_flatten_next_reg_2440;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_747 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    output_x_coords_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                output_x_coords_reg_736 <= next_mul_reg_2372;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                output_x_coords_reg_736 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    shift_x_reg_725_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                shift_x_reg_725 <= center_x_reg_2381;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                shift_x_reg_725 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_y_reg_758_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                shift_y_reg_758 <= shift_y_cast6_mid2_v_reg_2445;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then 
                shift_y_reg_758 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_11001 = ap_const_boolean_0))) then
                B_20_V_load_reg_2834 <= B_20_V_Dout_A;
                B_21_V_load_reg_2849 <= B_21_V_Dout_A;
                B_22_V_load_reg_2854 <= B_22_V_Dout_A;
                B_23_V_load_reg_2859 <= B_23_V_Dout_A;
                B_24_V_load_reg_2864 <= B_24_V_Dout_A;
                B_25_V_load_reg_2869 <= B_25_V_Dout_A;
                B_26_V_load_reg_2874 <= B_26_V_Dout_A;
                tmp_24_reg_2839 <= grp_fu_2300_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                center_x_reg_2381 <= center_x_fu_792_p2;
                next_mul_reg_2372 <= next_mul_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_1098_p2))) then
                    channel_out1_reg_2501(5 downto 0) <= channel_out1_fu_1208_p1(5 downto 0);
                output_coords_reg_2491 <= output_coords_fu_1204_p2;
                tmp_14_0_1_mid2_v_v_reg_2456 <= tmp_14_0_1_mid2_v_v_fu_1175_p2;
                tmp_14_0_2_mid2_v_v_reg_2463 <= tmp_14_0_2_mid2_v_v_fu_1180_p2;
                tmp_14_1_1_mid2_v_reg_2477 <= tmp_14_1_1_mid2_v_fu_1190_p2;
                tmp_14_1_2_mid2_v_reg_2484 <= tmp_14_1_2_mid2_v_fu_1195_p2;
                tmp_14_1_mid2_v_reg_2470 <= tmp_14_1_mid2_v_fu_1185_p2;
                tmp_14_mid2_v_v_reg_2451 <= tmp_14_mid2_v_v_fu_1146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_1098_p2))) then
                channel_out_1_reg_2545 <= channel_out_1_fu_1214_p2;
                shift_y_cast6_mid2_v_reg_2445 <= shift_y_cast6_mid2_v_fu_1130_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                exitcond_flatten_reg_2436 <= exitcond_flatten_fu_1098_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_2440 <= indvar_flatten_next_fu_1104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_0))) then
                    output_x_coords_cast_reg_2386(15 downto 0) <= output_x_coords_cast_fu_806_p1(15 downto 0);
                    tmp_10_0_1_reg_2396(16 downto 5) <= tmp_10_0_1_fu_864_p2(16 downto 5);
                    tmp_10_0_2_reg_2401(16 downto 5) <= tmp_10_0_2_fu_900_p2(16 downto 5);
                    tmp_10_1_1_reg_2411(16 downto 5) <= tmp_10_1_1_fu_964_p2(16 downto 5);
                    tmp_10_1_2_reg_2416(16 downto 5) <= tmp_10_1_2_fu_996_p2(16 downto 5);
                    tmp_10_1_reg_2406(16 downto 5) <= tmp_10_1_fu_932_p2(16 downto 5);
                    tmp_10_2_1_reg_2426(17 downto 5) <= tmp_10_2_1_fu_1060_p2(17 downto 5);
                    tmp_10_2_2_reg_2431(17 downto 5) <= tmp_10_2_2_fu_1092_p2(17 downto 5);
                    tmp_10_2_reg_2421(17 downto 5) <= tmp_10_2_fu_1028_p2(17 downto 5);
                    tmp_s_reg_2391(16 downto 5) <= tmp_s_fu_834_p2(16 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then
                tmp_10_reg_2610 <= grp_fu_2174_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then
                tmp_12_reg_2635 <= grp_fu_2192_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then
                tmp_14_2_1_mid2_v_reg_2755 <= tmp_14_2_1_mid2_v_fu_1794_p2;
                tmp_14_2_2_mid2_v_reg_2762 <= tmp_14_2_2_mid2_v_fu_1799_p2;
                tmp_14_2_mid2_v_reg_2750 <= tmp_14_2_mid2_v_fu_1773_p2;
                tmp_22_reg_2779 <= grp_fu_2282_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then
                tmp_14_reg_2660 <= grp_fu_2210_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_11001 = ap_const_boolean_0))) then
                tmp_16_reg_2685 <= grp_fu_2228_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0))) then
                tmp_18_reg_2710 <= grp_fu_2246_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0))) then
                tmp_20_reg_2735 <= grp_fu_2264_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_11001 = ap_const_boolean_0))) then
                tmp_26_reg_2884 <= grp_fu_2318_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12_11001 = ap_const_boolean_0))) then
                tmp_28_reg_2899 <= grp_fu_2336_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13_11001 = ap_const_boolean_0))) then
                tmp_30_reg_2914 <= grp_fu_2354_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436))) then
                tmp_4_reg_2560 <= grp_fu_2138_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0))) then
                tmp_8_reg_2585 <= grp_fu_2156_p3(11 downto 4);
            end if;
        end if;
    end process;
    output_x_coords_cast_reg_2386(20 downto 16) <= "00000";
    tmp_s_reg_2391(4 downto 0) <= "00000";
    tmp_10_0_1_reg_2396(4 downto 0) <= "00000";
    tmp_10_0_2_reg_2401(4 downto 0) <= "00000";
    tmp_10_1_reg_2406(4 downto 0) <= "00000";
    tmp_10_1_1_reg_2411(4 downto 0) <= "00000";
    tmp_10_1_2_reg_2416(4 downto 0) <= "00000";
    tmp_10_2_reg_2421(4 downto 0) <= "00000";
    tmp_10_2_1_reg_2426(4 downto 0) <= "00000";
    tmp_10_2_2_reg_2431(4 downto 0) <= "00000";
    channel_out1_reg_2501(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_786_p2, exitcond_flatten_fu_1098_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_flatten_fu_1098_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_flatten_fu_1098_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_block_pp0_stage10_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_block_pp0_stage11_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_block_pp0_stage12_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_block_pp0_stage13_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_V_Addr_A <= std_logic_vector(shift_left(unsigned(A_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    A_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage0, tmp_14_mid2_fu_1155_p1, tmp_14_0_0_2_mid2_fu_1229_p1, ap_block_pp0_stage1, tmp_14_0_1_1_mid2_fu_1300_p1, ap_block_pp0_stage2, tmp_14_0_2_mid2_fu_1371_p1, ap_block_pp0_stage3, tmp_14_0_2_2_mid2_fu_1448_p1, ap_block_pp0_stage4, tmp_14_1_0_1_mid2_fu_1511_p1, ap_block_pp0_stage5, tmp_14_1_1_mid2_fu_1575_p1, ap_block_pp0_stage6, tmp_14_1_1_2_mid2_fu_1643_p1, ap_block_pp0_stage7, tmp_14_1_2_1_mid2_fu_1706_p1, ap_block_pp0_stage8, tmp_14_2_mid2_fu_1778_p1, ap_block_pp0_stage9, tmp_14_2_0_2_mid2_fu_1858_p1, ap_block_pp0_stage10, tmp_14_2_1_1_mid2_fu_1921_p1, ap_block_pp0_stage11, tmp_14_2_2_mid2_fu_1983_p1, ap_block_pp0_stage12, tmp_14_2_2_2_mid2_fu_2049_p1, ap_block_pp0_stage13)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_2_2_2_mid2_fu_2049_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_2_2_mid2_fu_1983_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_2_1_1_mid2_fu_1921_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_2_0_2_mid2_fu_1858_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_2_mid2_fu_1778_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_1_2_1_mid2_fu_1706_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_1_1_2_mid2_fu_1643_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_1_1_mid2_fu_1575_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_1_0_1_mid2_fu_1511_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_0_2_2_mid2_fu_1448_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_0_2_mid2_fu_1371_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_0_1_1_mid2_fu_1300_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_0_0_2_mid2_fu_1229_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
                A_V_Addr_A_orig <= tmp_14_mid2_fu_1155_p1(32 - 1 downto 0);
            else 
                A_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            A_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    A_V_Addr_B <= std_logic_vector(shift_left(unsigned(A_V_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    A_V_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage0, tmp_14_0_0_1_mid2_fu_1170_p1, ap_block_pp0_stage1, tmp_14_0_1_mid2_fu_1237_p1, ap_block_pp0_stage2, tmp_14_0_1_2_mid2_fu_1314_p1, ap_block_pp0_stage3, tmp_14_0_2_1_mid2_fu_1385_p1, ap_block_pp0_stage4, tmp_14_1_mid2_fu_1453_p1, ap_block_pp0_stage5, tmp_14_1_0_2_mid2_fu_1521_p1, ap_block_pp0_stage6, tmp_14_1_1_1_mid2_fu_1584_p1, ap_block_pp0_stage7, tmp_14_1_2_mid2_fu_1648_p1, ap_block_pp0_stage8, tmp_14_1_2_2_mid2_fu_1716_p1, ap_block_pp0_stage9, tmp_14_2_0_1_mid2_fu_1789_p1, ap_block_pp0_stage10, tmp_14_2_1_mid2_fu_1863_p1, ap_block_pp0_stage11, tmp_14_2_1_2_mid2_fu_1931_p1, ap_block_pp0_stage12, tmp_14_2_2_1_mid2_fu_1992_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_2_2_1_mid2_fu_1992_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_2_1_2_mid2_fu_1931_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_2_1_mid2_fu_1863_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_2_0_1_mid2_fu_1789_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_1_2_2_mid2_fu_1716_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_1_2_mid2_fu_1648_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_1_1_1_mid2_fu_1584_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_1_0_2_mid2_fu_1521_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_1_mid2_fu_1453_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_0_2_1_mid2_fu_1385_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_0_1_2_mid2_fu_1314_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_0_1_mid2_fu_1237_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
                A_V_Addr_B_orig <= tmp_14_0_0_1_mid2_fu_1170_p1(32 - 1 downto 0);
            else 
                A_V_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            A_V_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    A_V_Clk_A <= ap_clk;
    A_V_Clk_B <= ap_clk;
    A_V_Din_A <= ap_const_lv8_0;
    A_V_Din_B <= ap_const_lv8_0;

    A_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13_11001 = ap_const_boolean_0)))) then 
            A_V_EN_A <= ap_const_logic_1;
        else 
            A_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    A_V_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12_11001 = ap_const_boolean_0)))) then 
            A_V_EN_B <= ap_const_logic_1;
        else 
            A_V_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    A_V_Rst_A <= ap_rst_n_inv;
    A_V_Rst_B <= ap_rst_n_inv;
    A_V_WEN_A <= ap_const_lv1_0;
    A_V_WEN_B <= ap_const_lv1_0;
    B_0_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_0_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_0_V_Addr_A_orig <= channel_out1_fu_1208_p1(32 - 1 downto 0);
    B_0_V_Clk_A <= ap_clk;
    B_0_V_Din_A <= ap_const_lv8_0;

    B_0_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            B_0_V_EN_A <= ap_const_logic_1;
        else 
            B_0_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_0_V_Rst_A <= ap_rst_n_inv;
    B_0_V_WEN_A <= ap_const_lv1_0;
    B_10_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_10_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_10_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_10_V_Clk_A <= ap_clk;
    B_10_V_Din_A <= ap_const_lv8_0;

    B_10_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then 
            B_10_V_EN_A <= ap_const_logic_1;
        else 
            B_10_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_10_V_Rst_A <= ap_rst_n_inv;
    B_10_V_WEN_A <= ap_const_lv1_0;
    B_11_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_11_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_11_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_11_V_Clk_A <= ap_clk;
    B_11_V_Din_A <= ap_const_lv8_0;

    B_11_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_11001 = ap_const_boolean_0))) then 
            B_11_V_EN_A <= ap_const_logic_1;
        else 
            B_11_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_11_V_Rst_A <= ap_rst_n_inv;
    B_11_V_WEN_A <= ap_const_lv1_0;
    B_12_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_12_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_12_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_12_V_Clk_A <= ap_clk;
    B_12_V_Din_A <= ap_const_lv8_0;

    B_12_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_11001 = ap_const_boolean_0))) then 
            B_12_V_EN_A <= ap_const_logic_1;
        else 
            B_12_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_12_V_Rst_A <= ap_rst_n_inv;
    B_12_V_WEN_A <= ap_const_lv1_0;
    B_13_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_13_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_13_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_13_V_Clk_A <= ap_clk;
    B_13_V_Din_A <= ap_const_lv8_0;

    B_13_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_11001 = ap_const_boolean_0))) then 
            B_13_V_EN_A <= ap_const_logic_1;
        else 
            B_13_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_13_V_Rst_A <= ap_rst_n_inv;
    B_13_V_WEN_A <= ap_const_lv1_0;
    B_14_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_14_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_14_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_14_V_Clk_A <= ap_clk;
    B_14_V_Din_A <= ap_const_lv8_0;

    B_14_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0))) then 
            B_14_V_EN_A <= ap_const_logic_1;
        else 
            B_14_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_14_V_Rst_A <= ap_rst_n_inv;
    B_14_V_WEN_A <= ap_const_lv1_0;
    B_15_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_15_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_15_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_15_V_Clk_A <= ap_clk;
    B_15_V_Din_A <= ap_const_lv8_0;

    B_15_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0))) then 
            B_15_V_EN_A <= ap_const_logic_1;
        else 
            B_15_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_15_V_Rst_A <= ap_rst_n_inv;
    B_15_V_WEN_A <= ap_const_lv1_0;
    B_16_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_16_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_16_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_16_V_Clk_A <= ap_clk;
    B_16_V_Din_A <= ap_const_lv8_0;

    B_16_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0))) then 
            B_16_V_EN_A <= ap_const_logic_1;
        else 
            B_16_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_16_V_Rst_A <= ap_rst_n_inv;
    B_16_V_WEN_A <= ap_const_lv1_0;
    B_17_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_17_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_17_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_17_V_Clk_A <= ap_clk;
    B_17_V_Din_A <= ap_const_lv8_0;

    B_17_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0))) then 
            B_17_V_EN_A <= ap_const_logic_1;
        else 
            B_17_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_17_V_Rst_A <= ap_rst_n_inv;
    B_17_V_WEN_A <= ap_const_lv1_0;
    B_18_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_18_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_18_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_18_V_Clk_A <= ap_clk;
    B_18_V_Din_A <= ap_const_lv8_0;

    B_18_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_18_V_EN_A <= ap_const_logic_1;
        else 
            B_18_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_18_V_Rst_A <= ap_rst_n_inv;
    B_18_V_WEN_A <= ap_const_lv1_0;
    B_19_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_19_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_19_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_19_V_Clk_A <= ap_clk;
    B_19_V_Din_A <= ap_const_lv8_0;

    B_19_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_19_V_EN_A <= ap_const_logic_1;
        else 
            B_19_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_19_V_Rst_A <= ap_rst_n_inv;
    B_19_V_WEN_A <= ap_const_lv1_0;
    B_1_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_1_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_1_V_Addr_A_orig <= channel_out1_fu_1208_p1(32 - 1 downto 0);
    B_1_V_Clk_A <= ap_clk;
    B_1_V_Din_A <= ap_const_lv8_0;

    B_1_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            B_1_V_EN_A <= ap_const_logic_1;
        else 
            B_1_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_1_V_Rst_A <= ap_rst_n_inv;
    B_1_V_WEN_A <= ap_const_lv1_0;
    B_20_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_20_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_20_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_20_V_Clk_A <= ap_clk;
    B_20_V_Din_A <= ap_const_lv8_0;

    B_20_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_20_V_EN_A <= ap_const_logic_1;
        else 
            B_20_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_20_V_Rst_A <= ap_rst_n_inv;
    B_20_V_WEN_A <= ap_const_lv1_0;
    B_21_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_21_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_21_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_21_V_Clk_A <= ap_clk;
    B_21_V_Din_A <= ap_const_lv8_0;

    B_21_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_21_V_EN_A <= ap_const_logic_1;
        else 
            B_21_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_21_V_Rst_A <= ap_rst_n_inv;
    B_21_V_WEN_A <= ap_const_lv1_0;
    B_22_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_22_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_22_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_22_V_Clk_A <= ap_clk;
    B_22_V_Din_A <= ap_const_lv8_0;

    B_22_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_22_V_EN_A <= ap_const_logic_1;
        else 
            B_22_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_22_V_Rst_A <= ap_rst_n_inv;
    B_22_V_WEN_A <= ap_const_lv1_0;
    B_23_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_23_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_23_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_23_V_Clk_A <= ap_clk;
    B_23_V_Din_A <= ap_const_lv8_0;

    B_23_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_23_V_EN_A <= ap_const_logic_1;
        else 
            B_23_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_23_V_Rst_A <= ap_rst_n_inv;
    B_23_V_WEN_A <= ap_const_lv1_0;
    B_24_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_24_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_24_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_24_V_Clk_A <= ap_clk;
    B_24_V_Din_A <= ap_const_lv8_0;

    B_24_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_24_V_EN_A <= ap_const_logic_1;
        else 
            B_24_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_24_V_Rst_A <= ap_rst_n_inv;
    B_24_V_WEN_A <= ap_const_lv1_0;
    B_25_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_25_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_25_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_25_V_Clk_A <= ap_clk;
    B_25_V_Din_A <= ap_const_lv8_0;

    B_25_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_25_V_EN_A <= ap_const_logic_1;
        else 
            B_25_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_25_V_Rst_A <= ap_rst_n_inv;
    B_25_V_WEN_A <= ap_const_lv1_0;
    B_26_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_26_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_26_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_26_V_Clk_A <= ap_clk;
    B_26_V_Din_A <= ap_const_lv8_0;

    B_26_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then 
            B_26_V_EN_A <= ap_const_logic_1;
        else 
            B_26_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_26_V_Rst_A <= ap_rst_n_inv;
    B_26_V_WEN_A <= ap_const_lv1_0;
    B_2_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_2_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_2_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_2_V_Clk_A <= ap_clk;
    B_2_V_Din_A <= ap_const_lv8_0;

    B_2_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then 
            B_2_V_EN_A <= ap_const_logic_1;
        else 
            B_2_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_2_V_Rst_A <= ap_rst_n_inv;
    B_2_V_WEN_A <= ap_const_lv1_0;
    B_3_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_3_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_3_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_3_V_Clk_A <= ap_clk;
    B_3_V_Din_A <= ap_const_lv8_0;

    B_3_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then 
            B_3_V_EN_A <= ap_const_logic_1;
        else 
            B_3_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_3_V_Rst_A <= ap_rst_n_inv;
    B_3_V_WEN_A <= ap_const_lv1_0;
    B_4_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_4_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_4_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_4_V_Clk_A <= ap_clk;
    B_4_V_Din_A <= ap_const_lv8_0;

    B_4_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0))) then 
            B_4_V_EN_A <= ap_const_logic_1;
        else 
            B_4_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_4_V_Rst_A <= ap_rst_n_inv;
    B_4_V_WEN_A <= ap_const_lv1_0;
    B_5_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_5_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_5_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_5_V_Clk_A <= ap_clk;
    B_5_V_Din_A <= ap_const_lv8_0;

    B_5_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_11001 = ap_const_boolean_0))) then 
            B_5_V_EN_A <= ap_const_logic_1;
        else 
            B_5_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_5_V_Rst_A <= ap_rst_n_inv;
    B_5_V_WEN_A <= ap_const_lv1_0;
    B_6_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_6_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_6_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_6_V_Clk_A <= ap_clk;
    B_6_V_Din_A <= ap_const_lv8_0;

    B_6_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then 
            B_6_V_EN_A <= ap_const_logic_1;
        else 
            B_6_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_6_V_Rst_A <= ap_rst_n_inv;
    B_6_V_WEN_A <= ap_const_lv1_0;
    B_7_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_7_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_7_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_7_V_Clk_A <= ap_clk;
    B_7_V_Din_A <= ap_const_lv8_0;

    B_7_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_11001 = ap_const_boolean_0))) then 
            B_7_V_EN_A <= ap_const_logic_1;
        else 
            B_7_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_7_V_Rst_A <= ap_rst_n_inv;
    B_7_V_WEN_A <= ap_const_lv1_0;
    B_8_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_8_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_8_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_8_V_Clk_A <= ap_clk;
    B_8_V_Din_A <= ap_const_lv8_0;

    B_8_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then 
            B_8_V_EN_A <= ap_const_logic_1;
        else 
            B_8_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_8_V_Rst_A <= ap_rst_n_inv;
    B_8_V_WEN_A <= ap_const_lv1_0;
    B_9_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_9_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    B_9_V_Addr_A_orig <= channel_out1_reg_2501(32 - 1 downto 0);
    B_9_V_Clk_A <= ap_clk;
    B_9_V_Din_A <= ap_const_lv8_0;

    B_9_V_EN_A_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_11001 = ap_const_boolean_0))) then 
            B_9_V_EN_A <= ap_const_logic_1;
        else 
            B_9_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_9_V_Rst_A <= ap_rst_n_inv;
    B_9_V_WEN_A <= ap_const_lv1_0;
    C_V_Addr_A <= std_logic_vector(shift_left(unsigned(C_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    C_V_Addr_A_orig <= tmp_7_fu_2125_p1(32 - 1 downto 0);
    C_V_Clk_A <= ap_clk;
    C_V_Din_A <= grp_fu_2363_p3(11 downto 4);

    C_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            C_V_EN_A <= ap_const_logic_1;
        else 
            C_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    C_V_Rst_A <= ap_rst_n_inv;

    C_V_WEN_A_assign_proc : process(exitcond_flatten_reg_2436, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            C_V_WEN_A <= ap_const_lv1_1;
        else 
            C_V_WEN_A <= ap_const_lv1_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_1098_p2)
    begin
        if ((exitcond_flatten_fu_1098_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_786_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_786_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_786_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    center_x_fu_792_p2 <= std_logic_vector(unsigned(shift_x_reg_725) + unsigned(ap_const_lv8_1));
    center_y_fu_1124_p2 <= std_logic_vector(unsigned(shift_y_phi_fu_762_p4) + unsigned(ap_const_lv8_1));
    channel_out1_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_out_mid2_fu_1116_p3),64));
    channel_out_1_fu_1214_p2 <= std_logic_vector(unsigned(channel_out_mid2_fu_1116_p3) + unsigned(ap_const_lv6_1));
    channel_out_mid2_fu_1116_p3 <= 
        ap_const_lv6_0 when (tmp_3_fu_1110_p2(0) = '1') else 
        channel_out_phi_fu_773_p4;

    channel_out_phi_fu_773_p4_assign_proc : process(channel_out_reg_769, exitcond_flatten_reg_2436, ap_CS_fsm_pp0_stage0, channel_out_1_reg_2545, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            channel_out_phi_fu_773_p4 <= channel_out_1_reg_2545;
        else 
            channel_out_phi_fu_773_p4 <= channel_out_reg_769;
        end if; 
    end process;

    exitcond_flatten_fu_1098_p2 <= "1" when (indvar_flatten_phi_fu_751_p4 = ap_const_lv13_1BC0) else "0";
    grp_fu_2129_p0 <= grp_fu_2129_p00(6 - 1 downto 0);
    grp_fu_2129_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_out_mid2_fu_1116_p3),21));
    grp_fu_2129_p1 <= ap_const_lv21_C084(17 - 1 downto 0);
    grp_fu_2129_p2 <= grp_fu_2129_p20(8 - 1 downto 0);
    grp_fu_2129_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_y_cast6_mid2_v_fu_1130_p3),21));
    grp_fu_2138_p2 <= (tmp_1_fu_1264_p4 & ap_const_lv4_0);
    grp_fu_2147_p2 <= (tmp_4_reg_2560 & ap_const_lv4_0);
    grp_fu_2156_p2 <= (tmp_6_fu_1342_p4 & ap_const_lv4_0);
    grp_fu_2165_p2 <= (tmp_8_reg_2585 & ap_const_lv4_0);
    grp_fu_2174_p2 <= (tmp_9_fu_1413_p4 & ap_const_lv4_0);
    grp_fu_2183_p2 <= (tmp_10_reg_2610 & ap_const_lv4_0);
    grp_fu_2192_p2 <= (tmp_11_fu_1480_p4 & ap_const_lv4_0);
    grp_fu_2201_p2 <= (tmp_12_reg_2635 & ap_const_lv4_0);
    grp_fu_2210_p2 <= (tmp_13_fu_1549_p4 & ap_const_lv4_0);
    grp_fu_2219_p2 <= (tmp_14_reg_2660 & ap_const_lv4_0);
    grp_fu_2228_p2 <= (tmp_15_fu_1612_p4 & ap_const_lv4_0);
    grp_fu_2237_p2 <= (tmp_16_reg_2685 & ap_const_lv4_0);
    grp_fu_2246_p2 <= (tmp_17_fu_1675_p4 & ap_const_lv4_0);
    grp_fu_2255_p2 <= (tmp_18_reg_2710 & ap_const_lv4_0);
    grp_fu_2264_p2 <= (tmp_19_fu_1744_p4 & ap_const_lv4_0);
    grp_fu_2273_p2 <= (tmp_20_reg_2735 & ap_const_lv4_0);
    grp_fu_2282_p2 <= (tmp_21_fu_1827_p4 & ap_const_lv4_0);
    grp_fu_2291_p2 <= (tmp_22_reg_2779 & ap_const_lv4_0);
    grp_fu_2300_p2 <= (tmp_23_fu_1890_p4 & ap_const_lv4_0);
    grp_fu_2309_p2 <= (tmp_24_reg_2839 & ap_const_lv4_0);
    grp_fu_2318_p2 <= (tmp_25_fu_1957_p4 & ap_const_lv4_0);
    grp_fu_2327_p2 <= (tmp_26_reg_2884 & ap_const_lv4_0);
    grp_fu_2336_p2 <= (tmp_27_fu_2018_p4 & ap_const_lv4_0);
    grp_fu_2345_p2 <= (tmp_28_reg_2899 & ap_const_lv4_0);
    grp_fu_2354_p2 <= (tmp_29_fu_2075_p4 & ap_const_lv4_0);
    grp_fu_2363_p2 <= (tmp_30_reg_2914 & ap_const_lv4_0);
    indvar_flatten_next_fu_1104_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_751_p4) + unsigned(ap_const_lv13_1));

    indvar_flatten_phi_fu_751_p4_assign_proc : process(indvar_flatten_reg_747, exitcond_flatten_reg_2436, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_2440, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_751_p4 <= indvar_flatten_next_reg_2440;
        else 
            indvar_flatten_phi_fu_751_p4 <= indvar_flatten_reg_747;
        end if; 
    end process;

    next_mul_fu_780_p2 <= std_logic_vector(unsigned(output_x_coords_reg_736) + unsigned(ap_const_lv16_DE));
    output_coords_fu_1204_p2 <= std_logic_vector(unsigned(grp_fu_2129_p3) + unsigned(output_x_coords_cast_reg_2386));
    output_x_coords_cast_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_x_coords_reg_736),21));
    p_Val2_1_fu_1250_p0 <= B_0_V_Dout_A;
    p_Val2_1_fu_1250_p1 <= A_V_Dout_A;
    p_Val2_1_fu_1250_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_1250_p0) * signed(p_Val2_1_fu_1250_p1))), 12));
    p_shl13_0_1_cast_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_0_1_fu_840_p3),17));
    p_shl13_0_1_fu_840_p3 <= (center_x_fu_792_p2 & ap_const_lv8_0);
    p_shl13_0_2_cast_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_0_2_fu_876_p3),17));
    p_shl13_0_2_fu_876_p3 <= (tmp_8_0_2_fu_870_p2 & ap_const_lv8_0);
    p_shl13_1_1_fu_944_p3 <= (tmp_8_1_1_fu_938_p2 & ap_const_lv8_0);
    p_shl13_1_2_fu_976_p3 <= (tmp_8_1_2_fu_970_p2 & ap_const_lv8_0);
    p_shl13_1_fu_912_p3 <= (tmp_8_1_fu_906_p2 & ap_const_lv8_0);
    p_shl13_2_1_fu_1040_p3 <= (tmp_8_2_1_fu_1034_p2 & ap_const_lv8_0);
    p_shl13_2_2_fu_1072_p3 <= (tmp_8_2_2_fu_1066_p2 & ap_const_lv8_0);
    p_shl13_2_fu_1008_p3 <= (tmp_8_2_fu_1002_p2 & ap_const_lv8_0);
    p_shl13_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_810_p3),17));
    p_shl14_0_1_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_0_1_fu_852_p3),17));
    p_shl14_0_1_fu_852_p3 <= (center_x_fu_792_p2 & ap_const_lv5_0);
    p_shl14_0_2_cast_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_0_2_fu_888_p3),17));
    p_shl14_0_2_fu_888_p3 <= (tmp_8_0_2_fu_870_p2 & ap_const_lv5_0);
    p_shl14_1_1_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_1_1_fu_952_p3),17));
    p_shl14_1_1_fu_952_p3 <= (tmp_8_1_1_fu_938_p2 & ap_const_lv5_0);
    p_shl14_1_2_cast_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_1_2_fu_984_p3),17));
    p_shl14_1_2_fu_984_p3 <= (tmp_8_1_2_fu_970_p2 & ap_const_lv5_0);
    p_shl14_1_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_1_fu_920_p3),17));
    p_shl14_1_fu_920_p3 <= (tmp_8_1_fu_906_p2 & ap_const_lv5_0);
    p_shl14_2_1_cast_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_2_1_fu_1048_p3),18));
    p_shl14_2_1_fu_1048_p3 <= (tmp_8_2_1_fu_1034_p2 & ap_const_lv5_0);
    p_shl14_2_2_cast_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_2_2_fu_1080_p3),18));
    p_shl14_2_2_fu_1080_p3 <= (tmp_8_2_2_fu_1066_p2 & ap_const_lv5_0);
    p_shl14_2_cast_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_2_fu_1016_p3),18));
    p_shl14_2_fu_1016_p3 <= (tmp_8_2_fu_1002_p2 & ap_const_lv5_0);
    p_shl14_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_822_p3),17));
    p_shl1_fu_822_p3 <= (shift_x_reg_725 & ap_const_lv5_0);
    p_shl_fu_810_p3 <= (shift_x_reg_725 & ap_const_lv8_0);
    shift_x_cast1_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_x_reg_725),10));
    shift_x_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_x_reg_725),9));
    shift_y_cast6_mid2_v_fu_1130_p3 <= 
        center_y_fu_1124_p2 when (tmp_3_fu_1110_p2(0) = '1') else 
        shift_y_phi_fu_762_p4;

    shift_y_phi_fu_762_p4_assign_proc : process(shift_y_reg_758, exitcond_flatten_reg_2436, ap_CS_fsm_pp0_stage0, shift_y_cast6_mid2_v_reg_2445, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2436) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            shift_y_phi_fu_762_p4 <= shift_y_cast6_mid2_v_reg_2445;
        else 
            shift_y_phi_fu_762_p4 <= shift_y_reg_758;
        end if; 
    end process;

    tmp_10_0_1_fu_864_p2 <= std_logic_vector(unsigned(p_shl13_0_1_cast_fu_848_p1) - unsigned(p_shl14_0_1_cast_fu_860_p1));
    tmp_10_0_2_fu_900_p2 <= std_logic_vector(unsigned(p_shl13_0_2_cast_fu_884_p1) - unsigned(p_shl14_0_2_cast_fu_896_p1));
    tmp_10_1_1_fu_964_p2 <= std_logic_vector(unsigned(p_shl13_1_1_fu_944_p3) - unsigned(p_shl14_1_1_cast_fu_960_p1));
    tmp_10_1_2_fu_996_p2 <= std_logic_vector(unsigned(p_shl13_1_2_fu_976_p3) - unsigned(p_shl14_1_2_cast_fu_992_p1));
    tmp_10_1_fu_932_p2 <= std_logic_vector(unsigned(p_shl13_1_fu_912_p3) - unsigned(p_shl14_1_cast_fu_928_p1));
    tmp_10_2_1_fu_1060_p2 <= std_logic_vector(unsigned(p_shl13_2_1_fu_1040_p3) - unsigned(p_shl14_2_1_cast_fu_1056_p1));
    tmp_10_2_2_fu_1092_p2 <= std_logic_vector(unsigned(p_shl13_2_2_fu_1072_p3) - unsigned(p_shl14_2_2_cast_fu_1088_p1));
    tmp_10_2_fu_1028_p2 <= std_logic_vector(unsigned(p_shl13_2_fu_1008_p3) - unsigned(p_shl14_2_cast_fu_1024_p1));
    tmp_11_fu_1480_p4 <= grp_fu_2183_p3(11 downto 4);
    tmp_13_fu_1549_p4 <= grp_fu_2201_p3(11 downto 4);
    tmp_14_0_0_1_mid2_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_0_1_mid2_v_fu_1166_p1),64));
        tmp_14_0_0_1_mid2_v_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_0_1_mid2_v_s_fu_1160_p2),32));

    tmp_14_0_0_1_mid2_v_s_fu_1160_p2 <= std_logic_vector(unsigned(tmp_14_mid2_v_v_fu_1146_p2) + unsigned(ap_const_lv17_1));
    tmp_14_0_0_2_mid2_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_0_2_mid2_v_fu_1225_p1),64));
        tmp_14_0_0_2_mid2_v_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_0_2_mid2_v_s_fu_1220_p2),32));

    tmp_14_0_0_2_mid2_v_s_fu_1220_p2 <= std_logic_vector(unsigned(tmp_14_mid2_v_v_reg_2451) + unsigned(ap_const_lv17_2));
    tmp_14_0_1_1_mid2_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_1_1_mid2_v_fu_1296_p1),64));
        tmp_14_0_1_1_mid2_v_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_1_1_mid2_v_s_fu_1291_p2),32));

    tmp_14_0_1_1_mid2_v_s_fu_1291_p2 <= std_logic_vector(unsigned(tmp_14_0_1_mid2_v_v_reg_2456) + unsigned(ap_const_lv17_1));
    tmp_14_0_1_2_mid2_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_1_2_mid2_v_fu_1310_p1),64));
        tmp_14_0_1_2_mid2_v_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_1_2_mid2_v_s_fu_1305_p2),32));

    tmp_14_0_1_2_mid2_v_s_fu_1305_p2 <= std_logic_vector(unsigned(tmp_14_0_1_mid2_v_v_reg_2456) + unsigned(ap_const_lv17_2));
    tmp_14_0_1_mid2_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_1_mid2_v_fu_1234_p1),64));
        tmp_14_0_1_mid2_v_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_1_mid2_v_v_reg_2456),32));

    tmp_14_0_1_mid2_v_v_fu_1175_p2 <= std_logic_vector(unsigned(tmp_10_0_1_reg_2396) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_0_2_1_mid2_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_2_1_mid2_v_fu_1381_p1),64));
        tmp_14_0_2_1_mid2_v_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_2_1_mid2_v_s_fu_1376_p2),32));

    tmp_14_0_2_1_mid2_v_s_fu_1376_p2 <= std_logic_vector(unsigned(tmp_14_0_2_mid2_v_v_reg_2463) + unsigned(ap_const_lv17_1));
    tmp_14_0_2_2_mid2_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_2_2_mid2_v_fu_1444_p1),64));
        tmp_14_0_2_2_mid2_v_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_2_2_mid2_v_s_fu_1439_p2),32));

    tmp_14_0_2_2_mid2_v_s_fu_1439_p2 <= std_logic_vector(unsigned(tmp_14_0_2_mid2_v_v_reg_2463) + unsigned(ap_const_lv17_2));
    tmp_14_0_2_mid2_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_0_2_mid2_v_fu_1368_p1),64));
        tmp_14_0_2_mid2_v_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_0_2_mid2_v_v_reg_2463),32));

    tmp_14_0_2_mid2_v_v_fu_1180_p2 <= std_logic_vector(unsigned(tmp_10_0_2_reg_2401) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_1_0_1_mid2_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_0_1_mid2_v_fu_1506_p2),64));
    tmp_14_1_0_1_mid2_v_fu_1506_p2 <= std_logic_vector(unsigned(tmp_14_1_mid2_v_reg_2470) + unsigned(ap_const_lv17_1));
    tmp_14_1_0_2_mid2_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_0_2_mid2_v_fu_1516_p2),64));
    tmp_14_1_0_2_mid2_v_fu_1516_p2 <= std_logic_vector(unsigned(tmp_14_1_mid2_v_reg_2470) + unsigned(ap_const_lv17_2));
    tmp_14_1_1_1_mid2_fu_1584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_1_1_mid2_v_fu_1579_p2),64));
    tmp_14_1_1_1_mid2_v_fu_1579_p2 <= std_logic_vector(unsigned(tmp_14_1_1_mid2_v_reg_2477) + unsigned(ap_const_lv17_1));
    tmp_14_1_1_2_mid2_fu_1643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_1_2_mid2_v_fu_1638_p2),64));
    tmp_14_1_1_2_mid2_v_fu_1638_p2 <= std_logic_vector(unsigned(tmp_14_1_1_mid2_v_reg_2477) + unsigned(ap_const_lv17_2));
    tmp_14_1_1_mid2_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_1_mid2_v_reg_2477),64));
    tmp_14_1_1_mid2_v_fu_1190_p2 <= std_logic_vector(unsigned(tmp_10_1_1_reg_2411) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_1_2_1_mid2_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_2_1_mid2_v_fu_1701_p2),64));
    tmp_14_1_2_1_mid2_v_fu_1701_p2 <= std_logic_vector(unsigned(tmp_14_1_2_mid2_v_reg_2484) + unsigned(ap_const_lv17_1));
    tmp_14_1_2_2_mid2_fu_1716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_2_2_mid2_v_fu_1711_p2),64));
    tmp_14_1_2_2_mid2_v_fu_1711_p2 <= std_logic_vector(unsigned(tmp_14_1_2_mid2_v_reg_2484) + unsigned(ap_const_lv17_2));
    tmp_14_1_2_mid2_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_2_mid2_v_reg_2484),64));
    tmp_14_1_2_mid2_v_fu_1195_p2 <= std_logic_vector(unsigned(tmp_10_1_2_reg_2416) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_1_mid2_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_1_mid2_v_reg_2470),64));
    tmp_14_1_mid2_v_fu_1185_p2 <= std_logic_vector(unsigned(tmp_10_1_reg_2406) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_2_0_1_mid2_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_0_1_mid2_v_fu_1783_p2),64));
    tmp_14_2_0_1_mid2_v_fu_1783_p2 <= std_logic_vector(unsigned(tmp_14_2_mid2_v_fu_1773_p2) + unsigned(ap_const_lv18_1));
    tmp_14_2_0_2_mid2_fu_1858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_0_2_mid2_v_fu_1853_p2),64));
    tmp_14_2_0_2_mid2_v_fu_1853_p2 <= std_logic_vector(unsigned(tmp_14_2_mid2_v_reg_2750) + unsigned(ap_const_lv18_2));
    tmp_14_2_1_1_mid2_fu_1921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_1_1_mid2_v_fu_1916_p2),64));
    tmp_14_2_1_1_mid2_v_fu_1916_p2 <= std_logic_vector(unsigned(tmp_14_2_1_mid2_v_reg_2755) + unsigned(ap_const_lv18_1));
    tmp_14_2_1_2_mid2_fu_1931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_1_2_mid2_v_fu_1926_p2),64));
    tmp_14_2_1_2_mid2_v_fu_1926_p2 <= std_logic_vector(unsigned(tmp_14_2_1_mid2_v_reg_2755) + unsigned(ap_const_lv18_2));
    tmp_14_2_1_mid2_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_1_mid2_v_reg_2755),64));
    tmp_14_2_1_mid2_v_fu_1794_p2 <= std_logic_vector(unsigned(tmp_10_2_1_reg_2426) + unsigned(tmp_14_2_mid2_v_v_fu_1770_p1));
    tmp_14_2_2_1_mid2_fu_1992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_2_1_mid2_v_fu_1987_p2),64));
    tmp_14_2_2_1_mid2_v_fu_1987_p2 <= std_logic_vector(unsigned(tmp_14_2_2_mid2_v_reg_2762) + unsigned(ap_const_lv18_1));
    tmp_14_2_2_2_mid2_fu_2049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_2_2_mid2_v_fu_2044_p2),64));
    tmp_14_2_2_2_mid2_v_fu_2044_p2 <= std_logic_vector(unsigned(tmp_14_2_2_mid2_v_reg_2762) + unsigned(ap_const_lv18_2));
    tmp_14_2_2_mid2_fu_1983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_2_mid2_v_reg_2762),64));
    tmp_14_2_2_mid2_v_fu_1799_p2 <= std_logic_vector(unsigned(tmp_10_2_2_reg_2431) + unsigned(tmp_14_2_mid2_v_v_fu_1770_p1));
    tmp_14_2_mid2_fu_1778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_2_mid2_v_fu_1773_p2),64));
    tmp_14_2_mid2_v_fu_1773_p2 <= std_logic_vector(unsigned(tmp_10_2_reg_2421) + unsigned(tmp_14_2_mid2_v_v_fu_1770_p1));
    tmp_14_2_mid2_v_v_fu_1770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_y_cast6_mid2_v_reg_2445),18));
    tmp_14_mid2_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_mid2_v_fu_1151_p1),64));
        tmp_14_mid2_v_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_mid2_v_v_fu_1146_p2),32));

    tmp_14_mid2_v_v_fu_1146_p2 <= std_logic_vector(unsigned(tmp_s_reg_2391) + unsigned(tmp_14_mid2_v_v_v_fu_1142_p1));
    tmp_14_mid2_v_v_v_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shift_y_cast6_mid2_v_fu_1130_p3),17));
    tmp_15_fu_1612_p4 <= grp_fu_2219_p3(11 downto 4);
    tmp_17_fu_1675_p4 <= grp_fu_2237_p3(11 downto 4);
    tmp_19_fu_1744_p4 <= grp_fu_2255_p3(11 downto 4);
    tmp_1_fu_1264_p4 <= p_Val2_1_fu_1250_p2(11 downto 4);
    tmp_21_fu_1827_p4 <= grp_fu_2273_p3(11 downto 4);
    tmp_23_fu_1890_p4 <= grp_fu_2291_p3(11 downto 4);
    tmp_25_fu_1957_p4 <= grp_fu_2309_p3(11 downto 4);
    tmp_27_fu_2018_p4 <= grp_fu_2327_p3(11 downto 4);
    tmp_29_fu_2075_p4 <= grp_fu_2345_p3(11 downto 4);
    tmp_3_fu_1110_p2 <= "1" when (channel_out_phi_fu_773_p4 = ap_const_lv6_20) else "0";
    tmp_6_fu_1342_p4 <= grp_fu_2147_p3(11 downto 4);
    tmp_7_fu_2125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_coords_reg_2491),64));
    tmp_8_0_2_fu_870_p2 <= std_logic_vector(unsigned(shift_x_reg_725) + unsigned(ap_const_lv8_2));
    tmp_8_1_1_fu_938_p2 <= std_logic_vector(unsigned(shift_x_cast_fu_802_p1) + unsigned(ap_const_lv9_E1));
    tmp_8_1_2_fu_970_p2 <= std_logic_vector(unsigned(shift_x_cast_fu_802_p1) + unsigned(ap_const_lv9_E2));
    tmp_8_1_fu_906_p2 <= std_logic_vector(unsigned(shift_x_cast_fu_802_p1) + unsigned(ap_const_lv9_E0));
    tmp_8_2_1_fu_1034_p2 <= std_logic_vector(unsigned(shift_x_cast1_fu_798_p1) + unsigned(ap_const_lv10_1C1));
    tmp_8_2_2_fu_1066_p2 <= std_logic_vector(unsigned(shift_x_cast1_fu_798_p1) + unsigned(ap_const_lv10_1C2));
    tmp_8_2_fu_1002_p2 <= std_logic_vector(unsigned(shift_x_cast1_fu_798_p1) + unsigned(ap_const_lv10_1C0));
    tmp_9_fu_1413_p4 <= grp_fu_2165_p3(11 downto 4);
    tmp_fu_786_p2 <= "1" when (shift_x_reg_725 = ap_const_lv8_DE) else "0";
    tmp_s_fu_834_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_818_p1) - unsigned(p_shl14_cast_fu_830_p1));
end behav;
