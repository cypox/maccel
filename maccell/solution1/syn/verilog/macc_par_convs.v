// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="macc_par_convs,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.213000,HLS_SYN_LAT=22107649,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=81,HLS_SYN_FF=1341,HLS_SYN_LUT=2941}" *)

module macc_par_convs (
        ap_clk,
        ap_rst_n,
        A_Addr_A,
        A_EN_A,
        A_WEN_A,
        A_Din_A,
        A_Dout_A,
        A_Clk_A,
        A_Rst_A,
        A_Addr_B,
        A_EN_B,
        A_WEN_B,
        A_Din_B,
        A_Dout_B,
        A_Clk_B,
        A_Rst_B,
        B_0_Addr_A,
        B_0_EN_A,
        B_0_WEN_A,
        B_0_Din_A,
        B_0_Dout_A,
        B_0_Clk_A,
        B_0_Rst_A,
        B_1_Addr_A,
        B_1_EN_A,
        B_1_WEN_A,
        B_1_Din_A,
        B_1_Dout_A,
        B_1_Clk_A,
        B_1_Rst_A,
        B_2_Addr_A,
        B_2_EN_A,
        B_2_WEN_A,
        B_2_Din_A,
        B_2_Dout_A,
        B_2_Clk_A,
        B_2_Rst_A,
        B_3_Addr_A,
        B_3_EN_A,
        B_3_WEN_A,
        B_3_Din_A,
        B_3_Dout_A,
        B_3_Clk_A,
        B_3_Rst_A,
        B_4_Addr_A,
        B_4_EN_A,
        B_4_WEN_A,
        B_4_Din_A,
        B_4_Dout_A,
        B_4_Clk_A,
        B_4_Rst_A,
        B_5_Addr_A,
        B_5_EN_A,
        B_5_WEN_A,
        B_5_Din_A,
        B_5_Dout_A,
        B_5_Clk_A,
        B_5_Rst_A,
        B_6_Addr_A,
        B_6_EN_A,
        B_6_WEN_A,
        B_6_Din_A,
        B_6_Dout_A,
        B_6_Clk_A,
        B_6_Rst_A,
        B_7_Addr_A,
        B_7_EN_A,
        B_7_WEN_A,
        B_7_Din_A,
        B_7_Dout_A,
        B_7_Clk_A,
        B_7_Rst_A,
        B_8_Addr_A,
        B_8_EN_A,
        B_8_WEN_A,
        B_8_Din_A,
        B_8_Dout_A,
        B_8_Clk_A,
        B_8_Rst_A,
        B_9_Addr_A,
        B_9_EN_A,
        B_9_WEN_A,
        B_9_Din_A,
        B_9_Dout_A,
        B_9_Clk_A,
        B_9_Rst_A,
        B_10_Addr_A,
        B_10_EN_A,
        B_10_WEN_A,
        B_10_Din_A,
        B_10_Dout_A,
        B_10_Clk_A,
        B_10_Rst_A,
        B_11_Addr_A,
        B_11_EN_A,
        B_11_WEN_A,
        B_11_Din_A,
        B_11_Dout_A,
        B_11_Clk_A,
        B_11_Rst_A,
        B_12_Addr_A,
        B_12_EN_A,
        B_12_WEN_A,
        B_12_Din_A,
        B_12_Dout_A,
        B_12_Clk_A,
        B_12_Rst_A,
        B_13_Addr_A,
        B_13_EN_A,
        B_13_WEN_A,
        B_13_Din_A,
        B_13_Dout_A,
        B_13_Clk_A,
        B_13_Rst_A,
        B_14_Addr_A,
        B_14_EN_A,
        B_14_WEN_A,
        B_14_Din_A,
        B_14_Dout_A,
        B_14_Clk_A,
        B_14_Rst_A,
        B_15_Addr_A,
        B_15_EN_A,
        B_15_WEN_A,
        B_15_Din_A,
        B_15_Dout_A,
        B_15_Clk_A,
        B_15_Rst_A,
        B_16_Addr_A,
        B_16_EN_A,
        B_16_WEN_A,
        B_16_Din_A,
        B_16_Dout_A,
        B_16_Clk_A,
        B_16_Rst_A,
        B_17_Addr_A,
        B_17_EN_A,
        B_17_WEN_A,
        B_17_Din_A,
        B_17_Dout_A,
        B_17_Clk_A,
        B_17_Rst_A,
        B_18_Addr_A,
        B_18_EN_A,
        B_18_WEN_A,
        B_18_Din_A,
        B_18_Dout_A,
        B_18_Clk_A,
        B_18_Rst_A,
        B_19_Addr_A,
        B_19_EN_A,
        B_19_WEN_A,
        B_19_Din_A,
        B_19_Dout_A,
        B_19_Clk_A,
        B_19_Rst_A,
        B_20_Addr_A,
        B_20_EN_A,
        B_20_WEN_A,
        B_20_Din_A,
        B_20_Dout_A,
        B_20_Clk_A,
        B_20_Rst_A,
        B_21_Addr_A,
        B_21_EN_A,
        B_21_WEN_A,
        B_21_Din_A,
        B_21_Dout_A,
        B_21_Clk_A,
        B_21_Rst_A,
        B_22_Addr_A,
        B_22_EN_A,
        B_22_WEN_A,
        B_22_Din_A,
        B_22_Dout_A,
        B_22_Clk_A,
        B_22_Rst_A,
        B_23_Addr_A,
        B_23_EN_A,
        B_23_WEN_A,
        B_23_Din_A,
        B_23_Dout_A,
        B_23_Clk_A,
        B_23_Rst_A,
        B_24_Addr_A,
        B_24_EN_A,
        B_24_WEN_A,
        B_24_Din_A,
        B_24_Dout_A,
        B_24_Clk_A,
        B_24_Rst_A,
        B_25_Addr_A,
        B_25_EN_A,
        B_25_WEN_A,
        B_25_Din_A,
        B_25_Dout_A,
        B_25_Clk_A,
        B_25_Rst_A,
        B_26_Addr_A,
        B_26_EN_A,
        B_26_WEN_A,
        B_26_Din_A,
        B_26_Dout_A,
        B_26_Clk_A,
        B_26_Rst_A,
        C_TDATA,
        C_TVALID,
        C_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_pp0_stage0 = 17'd4;
parameter    ap_ST_fsm_pp0_stage1 = 17'd8;
parameter    ap_ST_fsm_pp0_stage2 = 17'd16;
parameter    ap_ST_fsm_pp0_stage3 = 17'd32;
parameter    ap_ST_fsm_pp0_stage4 = 17'd64;
parameter    ap_ST_fsm_pp0_stage5 = 17'd128;
parameter    ap_ST_fsm_pp0_stage6 = 17'd256;
parameter    ap_ST_fsm_pp0_stage7 = 17'd512;
parameter    ap_ST_fsm_pp0_stage8 = 17'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 17'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 17'd32768;
parameter    ap_ST_fsm_state19 = 17'd65536;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] A_Addr_A;
output   A_EN_A;
output  [3:0] A_WEN_A;
output  [31:0] A_Din_A;
input  [31:0] A_Dout_A;
output   A_Clk_A;
output   A_Rst_A;
output  [31:0] A_Addr_B;
output   A_EN_B;
output  [3:0] A_WEN_B;
output  [31:0] A_Din_B;
input  [31:0] A_Dout_B;
output   A_Clk_B;
output   A_Rst_B;
output  [31:0] B_0_Addr_A;
output   B_0_EN_A;
output  [3:0] B_0_WEN_A;
output  [31:0] B_0_Din_A;
input  [31:0] B_0_Dout_A;
output   B_0_Clk_A;
output   B_0_Rst_A;
output  [31:0] B_1_Addr_A;
output   B_1_EN_A;
output  [3:0] B_1_WEN_A;
output  [31:0] B_1_Din_A;
input  [31:0] B_1_Dout_A;
output   B_1_Clk_A;
output   B_1_Rst_A;
output  [31:0] B_2_Addr_A;
output   B_2_EN_A;
output  [3:0] B_2_WEN_A;
output  [31:0] B_2_Din_A;
input  [31:0] B_2_Dout_A;
output   B_2_Clk_A;
output   B_2_Rst_A;
output  [31:0] B_3_Addr_A;
output   B_3_EN_A;
output  [3:0] B_3_WEN_A;
output  [31:0] B_3_Din_A;
input  [31:0] B_3_Dout_A;
output   B_3_Clk_A;
output   B_3_Rst_A;
output  [31:0] B_4_Addr_A;
output   B_4_EN_A;
output  [3:0] B_4_WEN_A;
output  [31:0] B_4_Din_A;
input  [31:0] B_4_Dout_A;
output   B_4_Clk_A;
output   B_4_Rst_A;
output  [31:0] B_5_Addr_A;
output   B_5_EN_A;
output  [3:0] B_5_WEN_A;
output  [31:0] B_5_Din_A;
input  [31:0] B_5_Dout_A;
output   B_5_Clk_A;
output   B_5_Rst_A;
output  [31:0] B_6_Addr_A;
output   B_6_EN_A;
output  [3:0] B_6_WEN_A;
output  [31:0] B_6_Din_A;
input  [31:0] B_6_Dout_A;
output   B_6_Clk_A;
output   B_6_Rst_A;
output  [31:0] B_7_Addr_A;
output   B_7_EN_A;
output  [3:0] B_7_WEN_A;
output  [31:0] B_7_Din_A;
input  [31:0] B_7_Dout_A;
output   B_7_Clk_A;
output   B_7_Rst_A;
output  [31:0] B_8_Addr_A;
output   B_8_EN_A;
output  [3:0] B_8_WEN_A;
output  [31:0] B_8_Din_A;
input  [31:0] B_8_Dout_A;
output   B_8_Clk_A;
output   B_8_Rst_A;
output  [31:0] B_9_Addr_A;
output   B_9_EN_A;
output  [3:0] B_9_WEN_A;
output  [31:0] B_9_Din_A;
input  [31:0] B_9_Dout_A;
output   B_9_Clk_A;
output   B_9_Rst_A;
output  [31:0] B_10_Addr_A;
output   B_10_EN_A;
output  [3:0] B_10_WEN_A;
output  [31:0] B_10_Din_A;
input  [31:0] B_10_Dout_A;
output   B_10_Clk_A;
output   B_10_Rst_A;
output  [31:0] B_11_Addr_A;
output   B_11_EN_A;
output  [3:0] B_11_WEN_A;
output  [31:0] B_11_Din_A;
input  [31:0] B_11_Dout_A;
output   B_11_Clk_A;
output   B_11_Rst_A;
output  [31:0] B_12_Addr_A;
output   B_12_EN_A;
output  [3:0] B_12_WEN_A;
output  [31:0] B_12_Din_A;
input  [31:0] B_12_Dout_A;
output   B_12_Clk_A;
output   B_12_Rst_A;
output  [31:0] B_13_Addr_A;
output   B_13_EN_A;
output  [3:0] B_13_WEN_A;
output  [31:0] B_13_Din_A;
input  [31:0] B_13_Dout_A;
output   B_13_Clk_A;
output   B_13_Rst_A;
output  [31:0] B_14_Addr_A;
output   B_14_EN_A;
output  [3:0] B_14_WEN_A;
output  [31:0] B_14_Din_A;
input  [31:0] B_14_Dout_A;
output   B_14_Clk_A;
output   B_14_Rst_A;
output  [31:0] B_15_Addr_A;
output   B_15_EN_A;
output  [3:0] B_15_WEN_A;
output  [31:0] B_15_Din_A;
input  [31:0] B_15_Dout_A;
output   B_15_Clk_A;
output   B_15_Rst_A;
output  [31:0] B_16_Addr_A;
output   B_16_EN_A;
output  [3:0] B_16_WEN_A;
output  [31:0] B_16_Din_A;
input  [31:0] B_16_Dout_A;
output   B_16_Clk_A;
output   B_16_Rst_A;
output  [31:0] B_17_Addr_A;
output   B_17_EN_A;
output  [3:0] B_17_WEN_A;
output  [31:0] B_17_Din_A;
input  [31:0] B_17_Dout_A;
output   B_17_Clk_A;
output   B_17_Rst_A;
output  [31:0] B_18_Addr_A;
output   B_18_EN_A;
output  [3:0] B_18_WEN_A;
output  [31:0] B_18_Din_A;
input  [31:0] B_18_Dout_A;
output   B_18_Clk_A;
output   B_18_Rst_A;
output  [31:0] B_19_Addr_A;
output   B_19_EN_A;
output  [3:0] B_19_WEN_A;
output  [31:0] B_19_Din_A;
input  [31:0] B_19_Dout_A;
output   B_19_Clk_A;
output   B_19_Rst_A;
output  [31:0] B_20_Addr_A;
output   B_20_EN_A;
output  [3:0] B_20_WEN_A;
output  [31:0] B_20_Din_A;
input  [31:0] B_20_Dout_A;
output   B_20_Clk_A;
output   B_20_Rst_A;
output  [31:0] B_21_Addr_A;
output   B_21_EN_A;
output  [3:0] B_21_WEN_A;
output  [31:0] B_21_Din_A;
input  [31:0] B_21_Dout_A;
output   B_21_Clk_A;
output   B_21_Rst_A;
output  [31:0] B_22_Addr_A;
output   B_22_EN_A;
output  [3:0] B_22_WEN_A;
output  [31:0] B_22_Din_A;
input  [31:0] B_22_Dout_A;
output   B_22_Clk_A;
output   B_22_Rst_A;
output  [31:0] B_23_Addr_A;
output   B_23_EN_A;
output  [3:0] B_23_WEN_A;
output  [31:0] B_23_Din_A;
input  [31:0] B_23_Dout_A;
output   B_23_Clk_A;
output   B_23_Rst_A;
output  [31:0] B_24_Addr_A;
output   B_24_EN_A;
output  [3:0] B_24_WEN_A;
output  [31:0] B_24_Din_A;
input  [31:0] B_24_Dout_A;
output   B_24_Clk_A;
output   B_24_Rst_A;
output  [31:0] B_25_Addr_A;
output   B_25_EN_A;
output  [3:0] B_25_WEN_A;
output  [31:0] B_25_Din_A;
input  [31:0] B_25_Dout_A;
output   B_25_Clk_A;
output   B_25_Rst_A;
output  [31:0] B_26_Addr_A;
output   B_26_EN_A;
output  [3:0] B_26_WEN_A;
output  [31:0] B_26_Din_A;
input  [31:0] B_26_Dout_A;
output   B_26_Clk_A;
output   B_26_Rst_A;
output  [31:0] C_TDATA;
output   C_TVALID;
input   C_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg A_EN_A;
reg A_EN_B;
reg B_0_EN_A;
reg B_1_EN_A;
reg B_2_EN_A;
reg B_3_EN_A;
reg B_4_EN_A;
reg B_5_EN_A;
reg B_6_EN_A;
reg B_7_EN_A;
reg B_8_EN_A;
reg B_9_EN_A;
reg B_10_EN_A;
reg B_11_EN_A;
reg B_12_EN_A;
reg B_13_EN_A;
reg B_14_EN_A;
reg B_15_EN_A;
reg B_16_EN_A;
reg B_17_EN_A;
reg B_18_EN_A;
reg B_19_EN_A;
reg B_20_EN_A;
reg B_21_EN_A;
reg B_22_EN_A;
reg B_23_EN_A;
reg B_24_EN_A;
reg B_25_EN_A;
reg B_26_EN_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] C_1_data_out;
reg    C_1_vld_in;
wire    C_1_vld_out;
wire    C_1_ack_in;
wire    C_1_ack_out;
reg   [31:0] C_1_payload_A;
reg   [31:0] C_1_payload_B;
reg    C_1_sel_rd;
reg    C_1_sel_wr;
wire    C_1_sel;
wire    C_1_load_A;
wire    C_1_load_B;
reg   [1:0] C_1_state;
wire    C_1_state_cmp_full;
reg    C_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_6_reg_1912;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] ap_reg_pp0_iter1_tmp_6_reg_1912;
reg   [7:0] center_y_reg_718;
wire   [0:0] exitcond_flatten_fu_729_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] indvar_flatten_next_fu_735_p2;
reg   [12:0] indvar_flatten_next_reg_1717;
wire   [5:0] channel_out2_mid2_v_fu_761_p3;
reg   [5:0] channel_out2_mid2_v_reg_1722;
wire   [16:0] tmp_s_fu_832_p2;
reg   [16:0] tmp_s_reg_1727;
wire   [7:0] center_x_1_fu_838_p2;
reg   [7:0] center_x_1_reg_1732;
wire   [16:0] tmp_12_0_1_fu_868_p2;
reg   [16:0] tmp_12_0_1_reg_1737;
wire   [16:0] tmp_12_0_2_fu_904_p2;
reg   [16:0] tmp_12_0_2_reg_1742;
wire   [16:0] tmp_12_1_fu_936_p2;
reg   [16:0] tmp_12_1_reg_1747;
wire   [16:0] tmp_12_1_1_fu_968_p2;
reg   [16:0] tmp_12_1_1_reg_1752;
wire   [16:0] tmp_12_1_2_fu_1000_p2;
reg   [16:0] tmp_12_1_2_reg_1757;
wire   [17:0] tmp_12_2_fu_1032_p2;
reg   [17:0] tmp_12_2_reg_1762;
wire   [17:0] tmp_12_2_1_fu_1064_p2;
reg   [17:0] tmp_12_2_1_reg_1767;
wire   [17:0] tmp_12_2_2_fu_1096_p2;
reg   [17:0] tmp_12_2_2_reg_1772;
reg   [4:0] B_0_addr_reg_1777;
reg   [4:0] B_1_addr_reg_1782;
reg   [4:0] B_2_addr_reg_1787;
reg   [4:0] B_3_addr_reg_1792;
reg   [4:0] B_4_addr_reg_1797;
reg   [4:0] B_5_addr_reg_1802;
reg   [4:0] B_6_addr_reg_1807;
reg   [4:0] B_7_addr_reg_1812;
reg   [4:0] B_8_addr_reg_1817;
reg   [4:0] B_9_addr_reg_1822;
reg   [4:0] B_10_addr_reg_1827;
reg   [4:0] B_11_addr_reg_1832;
reg   [4:0] B_12_addr_reg_1837;
reg   [4:0] B_13_addr_reg_1842;
reg   [4:0] B_14_addr_reg_1847;
reg   [4:0] B_15_addr_reg_1852;
reg   [4:0] B_16_addr_reg_1857;
reg   [4:0] B_17_addr_reg_1862;
reg   [4:0] B_18_addr_reg_1867;
reg   [4:0] B_19_addr_reg_1872;
reg   [4:0] B_20_addr_reg_1877;
reg   [4:0] B_21_addr_reg_1882;
reg   [4:0] B_22_addr_reg_1887;
reg   [4:0] B_23_addr_reg_1892;
reg   [4:0] B_24_addr_reg_1897;
reg   [4:0] B_25_addr_reg_1902;
reg   [4:0] B_26_addr_reg_1907;
wire   [0:0] tmp_6_fu_1102_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] center_y_1_fu_1108_p2;
reg   [7:0] center_y_1_reg_1916;
reg    ap_enable_reg_pp0_iter0;
wire   [16:0] center_y_cast1_fu_1118_p1;
reg   [16:0] center_y_cast1_reg_1921;
wire   [16:0] input_coords_fu_1122_p2;
reg   [16:0] input_coords_reg_1930;
wire   [17:0] input_coords_2_fu_1151_p2;
reg   [17:0] input_coords_2_reg_1945;
wire   [17:0] input_coords_2_1_fu_1156_p2;
reg   [17:0] input_coords_2_1_reg_1952;
wire   [17:0] input_coords_2_2_fu_1161_p2;
reg   [17:0] input_coords_2_2_reg_1959;
wire   [31:0] tmp_4_fu_1166_p2;
reg   [31:0] tmp_4_reg_1966;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_18_0_0_1_fu_1172_p2;
reg   [31:0] tmp_18_0_0_1_reg_1971;
wire   [16:0] input_coords_0_1_fu_1192_p2;
reg   [16:0] input_coords_0_1_reg_1981;
wire   [16:0] input_coords_0_2_fu_1205_p2;
reg   [16:0] input_coords_0_2_reg_1992;
wire   [16:0] input_coords_1_fu_1209_p2;
reg   [16:0] input_coords_1_reg_1999;
wire   [16:0] input_coords_1_1_fu_1213_p2;
reg   [16:0] input_coords_1_1_reg_2006;
wire   [16:0] input_coords_1_2_fu_1217_p2;
reg   [16:0] input_coords_1_2_reg_2013;
wire   [31:0] tmp_18_0_1_fu_1227_p2;
reg   [31:0] tmp_18_0_1_reg_2020;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] tmp4_fu_1261_p2;
reg   [31:0] tmp4_reg_2035;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] tmp2_fu_1315_p2;
reg   [31:0] tmp2_reg_2050;
wire   [31:0] tmp_18_0_2_fu_1321_p2;
reg   [31:0] tmp_18_0_2_reg_2055;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] tmp_18_0_2_1_fu_1327_p2;
reg   [31:0] tmp_18_0_2_1_reg_2060;
wire   [31:0] tmp_18_1_fu_1357_p2;
reg   [31:0] tmp_18_1_reg_2075;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] tmp9_fu_1383_p2;
reg   [31:0] tmp9_reg_2090;
wire   [31:0] tmp_18_1_0_1_fu_1388_p2;
reg   [31:0] tmp_18_1_0_1_reg_2095;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] tmp_18_1_0_2_fu_1394_p2;
reg   [31:0] tmp_18_1_0_2_reg_2100;
wire   [31:0] tmp_18_1_1_1_fu_1420_p2;
reg   [31:0] tmp_18_1_1_1_reg_2115;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] tmp7_fu_1459_p2;
reg   [31:0] tmp7_reg_2130;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [31:0] tmp15_fu_1503_p2;
reg   [31:0] tmp15_reg_2145;
wire   [31:0] tmp_18_1_2_1_fu_1508_p2;
reg   [31:0] tmp_18_1_2_1_reg_2150;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [31:0] tmp_18_1_2_2_fu_1514_p2;
reg   [31:0] tmp_18_1_2_2_reg_2155;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [31:0] tmp17_fu_1570_p2;
reg   [31:0] tmp17_reg_2180;
wire   [31:0] tmp_18_2_0_2_fu_1576_p2;
reg   [31:0] tmp_18_2_0_2_reg_2185;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [31:0] tmp_18_2_1_fu_1582_p2;
reg   [31:0] tmp_18_2_1_reg_2190;
wire   [31:0] tmp_18_2_1_2_fu_1614_p2;
reg   [31:0] tmp_18_2_1_2_reg_2205;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state15_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [31:0] tmp19_fu_1634_p2;
reg   [31:0] tmp19_reg_2220;
wire   [31:0] tmp_18_2_2_fu_1639_p2;
reg   [31:0] tmp_18_2_2_reg_2225;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state16_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire   [31:0] tmp_18_2_2_1_fu_1645_p2;
reg   [31:0] tmp_18_2_2_1_reg_2230;
wire   [31:0] result_3_2_2_2_fu_1706_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [12:0] indvar_flatten_reg_685;
wire    ap_CS_fsm_state19;
reg   [5:0] channel_out_reg_696;
reg   [7:0] center_x_reg_707;
reg   [7:0] center_y_phi_fu_722_p4;
wire   [63:0] channel_out2_mid2_fu_769_p1;
wire   [63:0] tmp_1_fu_1131_p1;
wire   [63:0] tmp_16_0_0_1_fu_1146_p1;
wire   [63:0] tmp_16_0_0_2_fu_1187_p1;
wire   [63:0] tmp_16_0_1_fu_1200_p1;
wire   [63:0] tmp_16_0_1_1_fu_1242_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_16_0_1_2_fu_1256_p1;
wire   [63:0] tmp_16_0_2_fu_1281_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_16_0_2_1_fu_1295_p1;
wire   [63:0] tmp_16_0_2_2_fu_1342_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_16_1_fu_1347_p1;
wire   [63:0] tmp_16_1_0_1_fu_1368_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_16_1_0_2_fu_1378_p1;
wire   [63:0] tmp_16_1_1_fu_1400_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] tmp_16_1_1_1_fu_1409_p1;
wire   [63:0] tmp_16_1_1_2_fu_1431_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] tmp_16_1_2_fu_1436_p1;
wire   [63:0] tmp_16_1_2_1_fu_1482_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] tmp_16_1_2_2_fu_1492_p1;
wire   [63:0] tmp_16_2_fu_1520_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] tmp_16_2_0_1_fu_1529_p1;
wire   [63:0] tmp_16_2_0_2_fu_1551_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] tmp_16_2_1_fu_1556_p1;
wire   [63:0] tmp_16_2_1_1_fu_1593_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] tmp_16_2_1_2_fu_1603_p1;
wire   [63:0] tmp_16_2_2_fu_1620_p1;
wire    ap_block_pp0_stage12;
wire   [63:0] tmp_16_2_2_1_fu_1629_p1;
wire   [63:0] tmp_16_2_2_2_fu_1656_p1;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
reg   [31:0] A_Addr_A_orig;
reg   [31:0] A_Addr_B_orig;
wire   [31:0] B_0_Addr_A_orig;
wire   [31:0] B_1_Addr_A_orig;
wire   [31:0] B_2_Addr_A_orig;
wire   [31:0] B_3_Addr_A_orig;
wire   [31:0] B_4_Addr_A_orig;
wire   [31:0] B_5_Addr_A_orig;
wire   [31:0] B_6_Addr_A_orig;
wire   [31:0] B_7_Addr_A_orig;
wire   [31:0] B_8_Addr_A_orig;
wire   [31:0] B_9_Addr_A_orig;
wire   [31:0] B_10_Addr_A_orig;
wire   [31:0] B_11_Addr_A_orig;
wire   [31:0] B_12_Addr_A_orig;
wire   [31:0] B_13_Addr_A_orig;
wire   [31:0] B_14_Addr_A_orig;
wire   [31:0] B_15_Addr_A_orig;
wire   [31:0] B_16_Addr_A_orig;
wire   [31:0] B_17_Addr_A_orig;
wire   [31:0] B_18_Addr_A_orig;
wire   [31:0] B_19_Addr_A_orig;
wire   [31:0] B_20_Addr_A_orig;
wire   [31:0] B_21_Addr_A_orig;
wire   [31:0] B_22_Addr_A_orig;
wire   [31:0] B_23_Addr_A_orig;
wire   [31:0] B_24_Addr_A_orig;
wire   [31:0] B_25_Addr_A_orig;
wire   [31:0] B_26_Addr_A_orig;
wire   [0:0] tmp_3_fu_741_p2;
wire   [5:0] channel_out_s_fu_755_p2;
wire   [7:0] center_x_mid2_fu_747_p3;
wire   [15:0] p_shl_fu_808_p3;
wire   [12:0] p_shl1_fu_820_p3;
wire   [16:0] p_shl12_cast_fu_816_p1;
wire   [16:0] p_shl13_cast_fu_828_p1;
wire   [15:0] p_shl12_0_1_fu_844_p3;
wire   [12:0] p_shl13_0_1_fu_856_p3;
wire   [16:0] p_shl12_0_1_cast_fu_852_p1;
wire   [16:0] p_shl13_0_1_cast_fu_864_p1;
wire   [7:0] tmp_11_0_2_fu_874_p2;
wire   [15:0] p_shl12_0_2_fu_880_p3;
wire   [12:0] p_shl13_0_2_fu_892_p3;
wire   [16:0] p_shl12_0_2_cast_fu_888_p1;
wire   [16:0] p_shl13_0_2_cast_fu_900_p1;
wire   [8:0] center_x_cast_fu_804_p1;
wire   [8:0] tmp_11_1_fu_910_p2;
wire   [13:0] p_shl13_1_fu_924_p3;
wire   [16:0] p_shl12_1_fu_916_p3;
wire   [16:0] p_shl13_1_cast_fu_932_p1;
wire   [8:0] tmp_11_1_1_fu_942_p2;
wire   [13:0] p_shl13_1_1_fu_956_p3;
wire   [16:0] p_shl12_1_1_fu_948_p3;
wire   [16:0] p_shl13_1_1_cast_fu_964_p1;
wire   [8:0] tmp_11_1_2_fu_974_p2;
wire   [13:0] p_shl13_1_2_fu_988_p3;
wire   [16:0] p_shl12_1_2_fu_980_p3;
wire   [16:0] p_shl13_1_2_cast_fu_996_p1;
wire   [9:0] center_x_cast1_fu_800_p1;
wire   [9:0] tmp_11_2_fu_1006_p2;
wire   [14:0] p_shl13_2_fu_1020_p3;
wire   [17:0] p_shl12_2_fu_1012_p3;
wire   [17:0] p_shl13_2_cast_fu_1028_p1;
wire   [9:0] tmp_11_2_1_fu_1038_p2;
wire   [14:0] p_shl13_2_1_fu_1052_p3;
wire   [17:0] p_shl12_2_1_fu_1044_p3;
wire   [17:0] p_shl13_2_1_cast_fu_1060_p1;
wire   [9:0] tmp_11_2_2_fu_1070_p2;
wire   [14:0] p_shl13_2_2_fu_1084_p3;
wire   [17:0] p_shl12_2_2_fu_1076_p3;
wire   [17:0] p_shl13_2_2_cast_fu_1092_p1;
wire  signed [31:0] input_coords_0_cast_fu_1127_p1;
wire   [16:0] input_coords_0_0_1_fu_1136_p2;
wire  signed [31:0] input_coords_0_0_1_c_fu_1142_p1;
wire   [17:0] center_y_cast_fu_1114_p1;
wire  signed [31:0] tmp_4_fu_1166_p0;
wire  signed [31:0] tmp_4_fu_1166_p1;
wire  signed [31:0] tmp_18_0_0_1_fu_1172_p0;
wire  signed [31:0] tmp_18_0_0_1_fu_1172_p1;
wire   [16:0] input_coords_0_0_2_fu_1178_p2;
wire  signed [31:0] input_coords_0_0_2_c_fu_1183_p1;
wire  signed [31:0] input_coords_0_1_cas_fu_1196_p1;
wire  signed [31:0] tmp_18_0_0_2_fu_1221_p0;
wire  signed [31:0] tmp_18_0_0_2_fu_1221_p1;
wire  signed [31:0] tmp_18_0_1_fu_1227_p0;
wire  signed [31:0] tmp_18_0_1_fu_1227_p1;
wire   [16:0] input_coords_0_1_1_fu_1233_p2;
wire  signed [31:0] input_coords_0_1_1_c_fu_1238_p1;
wire   [16:0] input_coords_0_1_2_fu_1247_p2;
wire  signed [31:0] input_coords_0_1_2_c_fu_1252_p1;
wire   [31:0] tmp_18_0_0_2_fu_1221_p2;
wire  signed [31:0] tmp_18_0_1_1_fu_1266_p0;
wire  signed [31:0] tmp_18_0_1_1_fu_1266_p1;
wire  signed [31:0] tmp_18_0_1_2_fu_1272_p0;
wire  signed [31:0] tmp_18_0_1_2_fu_1272_p1;
wire  signed [31:0] input_coords_0_2_cas_fu_1278_p1;
wire   [16:0] input_coords_0_2_1_fu_1286_p2;
wire  signed [31:0] input_coords_0_2_1_c_fu_1291_p1;
wire   [31:0] tmp_18_0_1_1_fu_1266_p2;
wire   [31:0] tmp_18_0_1_2_fu_1272_p2;
wire   [31:0] tmp6_fu_1304_p2;
wire   [31:0] tmp5_fu_1310_p2;
wire   [31:0] tmp3_fu_1300_p2;
wire  signed [31:0] tmp_18_0_2_fu_1321_p0;
wire  signed [31:0] tmp_18_0_2_fu_1321_p1;
wire  signed [31:0] tmp_18_0_2_1_fu_1327_p0;
wire  signed [31:0] tmp_18_0_2_1_fu_1327_p1;
wire   [16:0] input_coords_0_2_2_fu_1333_p2;
wire  signed [31:0] input_coords_0_2_2_c_fu_1338_p1;
wire  signed [31:0] tmp_18_0_2_2_fu_1351_p0;
wire  signed [31:0] tmp_18_0_2_2_fu_1351_p1;
wire  signed [31:0] tmp_18_1_fu_1357_p0;
wire  signed [31:0] tmp_18_1_fu_1357_p1;
wire   [16:0] input_coords_1_0_1_fu_1363_p2;
wire   [16:0] input_coords_1_0_2_fu_1373_p2;
wire   [31:0] tmp_18_0_2_2_fu_1351_p2;
wire  signed [31:0] tmp_18_1_0_1_fu_1388_p0;
wire  signed [31:0] tmp_18_1_0_1_fu_1388_p1;
wire  signed [31:0] tmp_18_1_0_2_fu_1394_p0;
wire  signed [31:0] tmp_18_1_0_2_fu_1394_p1;
wire   [16:0] input_coords_1_1_1_fu_1404_p2;
wire  signed [31:0] tmp_18_1_1_fu_1414_p0;
wire  signed [31:0] tmp_18_1_1_fu_1414_p1;
wire  signed [31:0] tmp_18_1_1_1_fu_1420_p0;
wire  signed [31:0] tmp_18_1_1_1_fu_1420_p1;
wire   [16:0] input_coords_1_1_2_fu_1426_p2;
wire   [31:0] tmp_18_1_1_fu_1414_p2;
wire   [31:0] tmp11_fu_1448_p2;
wire   [31:0] tmp_fu_1444_p2;
wire   [31:0] tmp10_fu_1453_p2;
wire   [31:0] tmp8_fu_1440_p2;
wire  signed [31:0] tmp_18_1_1_2_fu_1465_p0;
wire  signed [31:0] tmp_18_1_1_2_fu_1465_p1;
wire  signed [31:0] tmp_18_1_2_fu_1471_p0;
wire  signed [31:0] tmp_18_1_2_fu_1471_p1;
wire   [16:0] input_coords_1_2_1_fu_1477_p2;
wire   [16:0] input_coords_1_2_2_fu_1487_p2;
wire   [31:0] tmp_18_1_1_2_fu_1465_p2;
wire   [31:0] tmp_18_1_2_fu_1471_p2;
wire   [31:0] tmp12_fu_1497_p2;
wire  signed [31:0] tmp_18_1_2_1_fu_1508_p0;
wire  signed [31:0] tmp_18_1_2_1_fu_1508_p1;
wire  signed [31:0] tmp_18_1_2_2_fu_1514_p0;
wire  signed [31:0] tmp_18_1_2_2_fu_1514_p1;
wire   [17:0] input_coords_2_0_1_fu_1524_p2;
wire  signed [31:0] tmp_18_2_fu_1534_p0;
wire  signed [31:0] tmp_18_2_fu_1534_p1;
wire  signed [31:0] tmp_18_2_0_1_fu_1540_p0;
wire  signed [31:0] tmp_18_2_0_1_fu_1540_p1;
wire   [17:0] input_coords_2_0_2_fu_1546_p2;
wire   [31:0] tmp_18_2_fu_1534_p2;
wire   [31:0] tmp_18_2_0_1_fu_1540_p2;
wire   [31:0] tmp18_fu_1564_p2;
wire   [31:0] tmp16_fu_1560_p2;
wire  signed [31:0] tmp_18_2_0_2_fu_1576_p0;
wire  signed [31:0] tmp_18_2_0_2_fu_1576_p1;
wire  signed [31:0] tmp_18_2_1_fu_1582_p0;
wire  signed [31:0] tmp_18_2_1_fu_1582_p1;
wire   [17:0] input_coords_2_1_1_fu_1588_p2;
wire   [17:0] input_coords_2_1_2_fu_1598_p2;
wire  signed [31:0] tmp_18_2_1_1_fu_1608_p0;
wire  signed [31:0] tmp_18_2_1_1_fu_1608_p1;
wire  signed [31:0] tmp_18_2_1_2_fu_1614_p0;
wire  signed [31:0] tmp_18_2_1_2_fu_1614_p1;
wire   [17:0] input_coords_2_2_1_fu_1624_p2;
wire   [31:0] tmp_18_2_1_1_fu_1608_p2;
wire  signed [31:0] tmp_18_2_2_fu_1639_p0;
wire  signed [31:0] tmp_18_2_2_fu_1639_p1;
wire  signed [31:0] tmp_18_2_2_1_fu_1645_p0;
wire  signed [31:0] tmp_18_2_2_1_fu_1645_p1;
wire   [17:0] input_coords_2_2_2_fu_1651_p2;
wire  signed [31:0] tmp_18_2_2_2_fu_1661_p0;
wire  signed [31:0] tmp_18_2_2_2_fu_1661_p1;
wire   [31:0] tmp_18_2_2_2_fu_1661_p2;
wire   [31:0] tmp24_fu_1683_p2;
wire   [31:0] tmp22_fu_1679_p2;
wire   [31:0] tmp23_fu_1688_p2;
wire   [31:0] tmp21_fu_1675_p2;
wire   [31:0] tmp20_fu_1694_p2;
wire   [31:0] tmp14_fu_1671_p2;
wire   [31:0] tmp13_fu_1700_p2;
wire   [31:0] tmp1_fu_1667_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 C_1_sel_rd = 1'b0;
#0 C_1_sel_wr = 1'b0;
#0 C_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

macc_par_convs_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
macc_par_convs_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        C_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == C_1_ack_out) & (1'b1 == C_1_vld_out))) begin
            C_1_sel_rd <= ~C_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        C_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == C_1_vld_in) & (1'b1 == C_1_ack_in))) begin
            C_1_sel_wr <= ~C_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        C_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == C_1_vld_in) & (1'b1 == C_1_ack_out) & (C_1_state == 2'd3)) | ((1'b0 == C_1_vld_in) & (C_1_state == 2'd2)))) begin
            C_1_state <= 2'd2;
        end else if ((((1'b1 == C_1_vld_in) & (1'b0 == C_1_ack_out) & (C_1_state == 2'd3)) | ((1'b0 == C_1_ack_out) & (C_1_state == 2'd1)))) begin
            C_1_state <= 2'd1;
        end else if ((((1'b1 == C_1_vld_in) & (C_1_state == 2'd2)) | ((1'b1 == C_1_ack_out) & (C_1_state == 2'd1)) | ((C_1_state == 2'd3) & ~((1'b1 == C_1_vld_in) & (1'b0 == C_1_ack_out)) & ~((1'b0 == C_1_vld_in) & (1'b1 == C_1_ack_out))))) begin
            C_1_state <= 2'd3;
        end else begin
            C_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd0 == exitcond_flatten_fu_729_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd0 == exitcond_flatten_fu_729_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        center_x_reg_707 <= center_x_1_reg_1732;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        center_x_reg_707 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd0 == exitcond_flatten_fu_729_p2))) begin
        center_y_reg_718 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == tmp_6_reg_1912) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        center_y_reg_718 <= center_y_1_reg_1916;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        channel_out_reg_696 <= channel_out2_mid2_v_reg_1722;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channel_out_reg_696 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten_reg_685 <= indvar_flatten_next_reg_1717;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_685 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd0 == exitcond_flatten_fu_729_p2))) begin
        B_0_addr_reg_1777 <= channel_out2_mid2_fu_769_p1;
        B_10_addr_reg_1827 <= channel_out2_mid2_fu_769_p1;
        B_11_addr_reg_1832 <= channel_out2_mid2_fu_769_p1;
        B_12_addr_reg_1837 <= channel_out2_mid2_fu_769_p1;
        B_13_addr_reg_1842 <= channel_out2_mid2_fu_769_p1;
        B_14_addr_reg_1847 <= channel_out2_mid2_fu_769_p1;
        B_15_addr_reg_1852 <= channel_out2_mid2_fu_769_p1;
        B_16_addr_reg_1857 <= channel_out2_mid2_fu_769_p1;
        B_17_addr_reg_1862 <= channel_out2_mid2_fu_769_p1;
        B_18_addr_reg_1867 <= channel_out2_mid2_fu_769_p1;
        B_19_addr_reg_1872 <= channel_out2_mid2_fu_769_p1;
        B_1_addr_reg_1782 <= channel_out2_mid2_fu_769_p1;
        B_20_addr_reg_1877 <= channel_out2_mid2_fu_769_p1;
        B_21_addr_reg_1882 <= channel_out2_mid2_fu_769_p1;
        B_22_addr_reg_1887 <= channel_out2_mid2_fu_769_p1;
        B_23_addr_reg_1892 <= channel_out2_mid2_fu_769_p1;
        B_24_addr_reg_1897 <= channel_out2_mid2_fu_769_p1;
        B_25_addr_reg_1902 <= channel_out2_mid2_fu_769_p1;
        B_26_addr_reg_1907 <= channel_out2_mid2_fu_769_p1;
        B_2_addr_reg_1787 <= channel_out2_mid2_fu_769_p1;
        B_3_addr_reg_1792 <= channel_out2_mid2_fu_769_p1;
        B_4_addr_reg_1797 <= channel_out2_mid2_fu_769_p1;
        B_5_addr_reg_1802 <= channel_out2_mid2_fu_769_p1;
        B_6_addr_reg_1807 <= channel_out2_mid2_fu_769_p1;
        B_7_addr_reg_1812 <= channel_out2_mid2_fu_769_p1;
        B_8_addr_reg_1817 <= channel_out2_mid2_fu_769_p1;
        B_9_addr_reg_1822 <= channel_out2_mid2_fu_769_p1;
        center_x_1_reg_1732 <= center_x_1_fu_838_p2;
        channel_out2_mid2_v_reg_1722 <= channel_out2_mid2_v_fu_761_p3;
        tmp_12_0_1_reg_1737[16 : 5] <= tmp_12_0_1_fu_868_p2[16 : 5];
        tmp_12_0_2_reg_1742[16 : 5] <= tmp_12_0_2_fu_904_p2[16 : 5];
        tmp_12_1_1_reg_1752[16 : 5] <= tmp_12_1_1_fu_968_p2[16 : 5];
        tmp_12_1_2_reg_1757[16 : 5] <= tmp_12_1_2_fu_1000_p2[16 : 5];
        tmp_12_1_reg_1747[16 : 5] <= tmp_12_1_fu_936_p2[16 : 5];
        tmp_12_2_1_reg_1767[17 : 5] <= tmp_12_2_1_fu_1064_p2[17 : 5];
        tmp_12_2_2_reg_1772[17 : 5] <= tmp_12_2_2_fu_1096_p2[17 : 5];
        tmp_12_2_reg_1762[17 : 5] <= tmp_12_2_fu_1032_p2[17 : 5];
        tmp_s_reg_1727[16 : 5] <= tmp_s_fu_832_p2[16 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == C_1_load_A)) begin
        C_1_payload_A <= result_3_2_2_2_fu_1706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == C_1_load_B)) begin
        C_1_payload_B <= result_3_2_2_2_fu_1706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_6_reg_1912 <= tmp_6_reg_1912;
        tmp_6_reg_1912 <= tmp_6_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        center_y_1_reg_1916 <= center_y_1_fu_1108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == tmp_6_fu_1102_p2))) begin
        center_y_cast1_reg_1921[7 : 0] <= center_y_cast1_fu_1118_p1[7 : 0];
        input_coords_2_1_reg_1952 <= input_coords_2_1_fu_1156_p2;
        input_coords_2_2_reg_1959 <= input_coords_2_2_fu_1161_p2;
        input_coords_2_reg_1945 <= input_coords_2_fu_1151_p2;
        input_coords_reg_1930 <= input_coords_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1))) begin
        indvar_flatten_next_reg_1717 <= indvar_flatten_next_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        input_coords_0_1_reg_1981 <= input_coords_0_1_fu_1192_p2;
        input_coords_0_2_reg_1992 <= input_coords_0_2_fu_1205_p2;
        input_coords_1_1_reg_2006 <= input_coords_1_1_fu_1213_p2;
        input_coords_1_2_reg_2013 <= input_coords_1_2_fu_1217_p2;
        input_coords_1_reg_1999 <= input_coords_1_fu_1209_p2;
        tmp_18_0_0_1_reg_1971 <= tmp_18_0_0_1_fu_1172_p2;
        tmp_4_reg_1966 <= tmp_4_fu_1166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        tmp15_reg_2145 <= tmp15_fu_1503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0))) begin
        tmp17_reg_2180 <= tmp17_fu_1570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0))) begin
        tmp19_reg_2220 <= tmp19_fu_1634_p2;
        tmp_18_2_1_2_reg_2205 <= tmp_18_2_1_2_fu_1614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        tmp2_reg_2050 <= tmp2_fu_1315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        tmp4_reg_2035 <= tmp4_fu_1261_p2;
        tmp_18_0_1_reg_2020 <= tmp_18_0_1_fu_1227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        tmp7_reg_2130 <= tmp7_fu_1459_p2;
        tmp_18_1_1_1_reg_2115 <= tmp_18_1_1_1_fu_1420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        tmp9_reg_2090 <= tmp9_fu_1383_p2;
        tmp_18_1_reg_2075 <= tmp_18_1_fu_1357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        tmp_18_0_2_1_reg_2060 <= tmp_18_0_2_1_fu_1327_p2;
        tmp_18_0_2_reg_2055 <= tmp_18_0_2_fu_1321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        tmp_18_1_0_1_reg_2095 <= tmp_18_1_0_1_fu_1388_p2;
        tmp_18_1_0_2_reg_2100 <= tmp_18_1_0_2_fu_1394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        tmp_18_1_2_1_reg_2150 <= tmp_18_1_2_1_fu_1508_p2;
        tmp_18_1_2_2_reg_2155 <= tmp_18_1_2_2_fu_1514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0))) begin
        tmp_18_2_0_2_reg_2185 <= tmp_18_2_0_2_fu_1576_p2;
        tmp_18_2_1_reg_2190 <= tmp_18_2_1_fu_1582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_reg_1912) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0))) begin
        tmp_18_2_2_1_reg_2230 <= tmp_18_2_2_1_fu_1645_p2;
        tmp_18_2_2_reg_2225 <= tmp_18_2_2_fu_1639_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_2_2_2_fu_1656_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_2_2_fu_1620_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_2_1_1_fu_1593_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_2_0_2_fu_1551_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_2_fu_1520_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_1_2_1_fu_1482_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_1_1_2_fu_1431_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_1_1_fu_1400_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_1_0_1_fu_1368_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_0_2_2_fu_1342_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_0_2_fu_1281_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_0_1_1_fu_1242_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            A_Addr_A_orig = tmp_16_0_0_2_fu_1187_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0))) begin
            A_Addr_A_orig = tmp_1_fu_1131_p1;
        end else begin
            A_Addr_A_orig = 'bx;
        end
    end else begin
        A_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_2_2_1_fu_1629_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_2_1_2_fu_1603_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_2_1_fu_1556_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_2_0_1_fu_1529_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_1_2_2_fu_1492_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_1_2_fu_1436_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_1_1_1_fu_1409_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_1_0_2_fu_1378_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_1_fu_1347_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_0_2_1_fu_1295_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_0_1_2_fu_1256_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_0_1_fu_1200_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0))) begin
            A_Addr_B_orig = tmp_16_0_0_1_fu_1146_p1;
        end else begin
            A_Addr_B_orig = 'bx;
        end
    end else begin
        A_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0)))) begin
        A_EN_A = 1'b1;
    end else begin
        A_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0)))) begin
        A_EN_B = 1'b1;
    end else begin
        A_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        B_0_EN_A = 1'b1;
    end else begin
        B_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        B_10_EN_A = 1'b1;
    end else begin
        B_10_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        B_11_EN_A = 1'b1;
    end else begin
        B_11_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        B_12_EN_A = 1'b1;
    end else begin
        B_12_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        B_13_EN_A = 1'b1;
    end else begin
        B_13_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        B_14_EN_A = 1'b1;
    end else begin
        B_14_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        B_15_EN_A = 1'b1;
    end else begin
        B_15_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        B_16_EN_A = 1'b1;
    end else begin
        B_16_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        B_17_EN_A = 1'b1;
    end else begin
        B_17_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_18_EN_A = 1'b1;
    end else begin
        B_18_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_19_EN_A = 1'b1;
    end else begin
        B_19_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        B_1_EN_A = 1'b1;
    end else begin
        B_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0))) begin
        B_20_EN_A = 1'b1;
    end else begin
        B_20_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0))) begin
        B_21_EN_A = 1'b1;
    end else begin
        B_21_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0))) begin
        B_22_EN_A = 1'b1;
    end else begin
        B_22_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0))) begin
        B_23_EN_A = 1'b1;
    end else begin
        B_23_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0))) begin
        B_24_EN_A = 1'b1;
    end else begin
        B_24_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0))) begin
        B_25_EN_A = 1'b1;
    end else begin
        B_25_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0))) begin
        B_26_EN_A = 1'b1;
    end else begin
        B_26_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        B_2_EN_A = 1'b1;
    end else begin
        B_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        B_3_EN_A = 1'b1;
    end else begin
        B_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        B_4_EN_A = 1'b1;
    end else begin
        B_4_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        B_5_EN_A = 1'b1;
    end else begin
        B_5_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        B_6_EN_A = 1'b1;
    end else begin
        B_6_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        B_7_EN_A = 1'b1;
    end else begin
        B_7_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        B_8_EN_A = 1'b1;
    end else begin
        B_8_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        B_9_EN_A = 1'b1;
    end else begin
        B_9_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == C_1_sel)) begin
        C_1_data_out = C_1_payload_B;
    end else begin
        C_1_data_out = C_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == tmp_6_reg_1912) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        C_1_vld_in = 1'b1;
    end else begin
        C_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == tmp_6_reg_1912)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_tmp_6_reg_1912)))) begin
        C_TDATA_blk_n = C_1_state[1'd1];
    end else begin
        C_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == tmp_6_fu_1102_p2)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd1 == exitcond_flatten_fu_729_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd1 == exitcond_flatten_fu_729_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == tmp_6_reg_1912))) begin
        center_y_phi_fu_722_p4 = center_y_1_reg_1916;
    end else begin
        center_y_phi_fu_722_p4 = center_y_reg_718;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd1 == exitcond_flatten_fu_729_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (C_1_ack_in == 1'b1) & (1'd0 == exitcond_flatten_fu_729_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == tmp_6_fu_1102_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == tmp_6_fu_1102_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((ap_block_pp0_stage12_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_Addr_A = A_Addr_A_orig << 32'd2;

assign A_Addr_B = A_Addr_B_orig << 32'd2;

assign A_Clk_A = ap_clk;

assign A_Clk_B = ap_clk;

assign A_Din_A = 32'd0;

assign A_Din_B = 32'd0;

assign A_Rst_A = ap_rst_n_inv;

assign A_Rst_B = ap_rst_n_inv;

assign A_WEN_A = 4'd0;

assign A_WEN_B = 4'd0;

assign B_0_Addr_A = B_0_Addr_A_orig << 32'd2;

assign B_0_Addr_A_orig = B_0_addr_reg_1777;

assign B_0_Clk_A = ap_clk;

assign B_0_Din_A = 32'd0;

assign B_0_Rst_A = ap_rst_n_inv;

assign B_0_WEN_A = 4'd0;

assign B_10_Addr_A = B_10_Addr_A_orig << 32'd2;

assign B_10_Addr_A_orig = B_10_addr_reg_1827;

assign B_10_Clk_A = ap_clk;

assign B_10_Din_A = 32'd0;

assign B_10_Rst_A = ap_rst_n_inv;

assign B_10_WEN_A = 4'd0;

assign B_11_Addr_A = B_11_Addr_A_orig << 32'd2;

assign B_11_Addr_A_orig = B_11_addr_reg_1832;

assign B_11_Clk_A = ap_clk;

assign B_11_Din_A = 32'd0;

assign B_11_Rst_A = ap_rst_n_inv;

assign B_11_WEN_A = 4'd0;

assign B_12_Addr_A = B_12_Addr_A_orig << 32'd2;

assign B_12_Addr_A_orig = B_12_addr_reg_1837;

assign B_12_Clk_A = ap_clk;

assign B_12_Din_A = 32'd0;

assign B_12_Rst_A = ap_rst_n_inv;

assign B_12_WEN_A = 4'd0;

assign B_13_Addr_A = B_13_Addr_A_orig << 32'd2;

assign B_13_Addr_A_orig = B_13_addr_reg_1842;

assign B_13_Clk_A = ap_clk;

assign B_13_Din_A = 32'd0;

assign B_13_Rst_A = ap_rst_n_inv;

assign B_13_WEN_A = 4'd0;

assign B_14_Addr_A = B_14_Addr_A_orig << 32'd2;

assign B_14_Addr_A_orig = B_14_addr_reg_1847;

assign B_14_Clk_A = ap_clk;

assign B_14_Din_A = 32'd0;

assign B_14_Rst_A = ap_rst_n_inv;

assign B_14_WEN_A = 4'd0;

assign B_15_Addr_A = B_15_Addr_A_orig << 32'd2;

assign B_15_Addr_A_orig = B_15_addr_reg_1852;

assign B_15_Clk_A = ap_clk;

assign B_15_Din_A = 32'd0;

assign B_15_Rst_A = ap_rst_n_inv;

assign B_15_WEN_A = 4'd0;

assign B_16_Addr_A = B_16_Addr_A_orig << 32'd2;

assign B_16_Addr_A_orig = B_16_addr_reg_1857;

assign B_16_Clk_A = ap_clk;

assign B_16_Din_A = 32'd0;

assign B_16_Rst_A = ap_rst_n_inv;

assign B_16_WEN_A = 4'd0;

assign B_17_Addr_A = B_17_Addr_A_orig << 32'd2;

assign B_17_Addr_A_orig = B_17_addr_reg_1862;

assign B_17_Clk_A = ap_clk;

assign B_17_Din_A = 32'd0;

assign B_17_Rst_A = ap_rst_n_inv;

assign B_17_WEN_A = 4'd0;

assign B_18_Addr_A = B_18_Addr_A_orig << 32'd2;

assign B_18_Addr_A_orig = B_18_addr_reg_1867;

assign B_18_Clk_A = ap_clk;

assign B_18_Din_A = 32'd0;

assign B_18_Rst_A = ap_rst_n_inv;

assign B_18_WEN_A = 4'd0;

assign B_19_Addr_A = B_19_Addr_A_orig << 32'd2;

assign B_19_Addr_A_orig = B_19_addr_reg_1872;

assign B_19_Clk_A = ap_clk;

assign B_19_Din_A = 32'd0;

assign B_19_Rst_A = ap_rst_n_inv;

assign B_19_WEN_A = 4'd0;

assign B_1_Addr_A = B_1_Addr_A_orig << 32'd2;

assign B_1_Addr_A_orig = B_1_addr_reg_1782;

assign B_1_Clk_A = ap_clk;

assign B_1_Din_A = 32'd0;

assign B_1_Rst_A = ap_rst_n_inv;

assign B_1_WEN_A = 4'd0;

assign B_20_Addr_A = B_20_Addr_A_orig << 32'd2;

assign B_20_Addr_A_orig = B_20_addr_reg_1877;

assign B_20_Clk_A = ap_clk;

assign B_20_Din_A = 32'd0;

assign B_20_Rst_A = ap_rst_n_inv;

assign B_20_WEN_A = 4'd0;

assign B_21_Addr_A = B_21_Addr_A_orig << 32'd2;

assign B_21_Addr_A_orig = B_21_addr_reg_1882;

assign B_21_Clk_A = ap_clk;

assign B_21_Din_A = 32'd0;

assign B_21_Rst_A = ap_rst_n_inv;

assign B_21_WEN_A = 4'd0;

assign B_22_Addr_A = B_22_Addr_A_orig << 32'd2;

assign B_22_Addr_A_orig = B_22_addr_reg_1887;

assign B_22_Clk_A = ap_clk;

assign B_22_Din_A = 32'd0;

assign B_22_Rst_A = ap_rst_n_inv;

assign B_22_WEN_A = 4'd0;

assign B_23_Addr_A = B_23_Addr_A_orig << 32'd2;

assign B_23_Addr_A_orig = B_23_addr_reg_1892;

assign B_23_Clk_A = ap_clk;

assign B_23_Din_A = 32'd0;

assign B_23_Rst_A = ap_rst_n_inv;

assign B_23_WEN_A = 4'd0;

assign B_24_Addr_A = B_24_Addr_A_orig << 32'd2;

assign B_24_Addr_A_orig = B_24_addr_reg_1897;

assign B_24_Clk_A = ap_clk;

assign B_24_Din_A = 32'd0;

assign B_24_Rst_A = ap_rst_n_inv;

assign B_24_WEN_A = 4'd0;

assign B_25_Addr_A = B_25_Addr_A_orig << 32'd2;

assign B_25_Addr_A_orig = B_25_addr_reg_1902;

assign B_25_Clk_A = ap_clk;

assign B_25_Din_A = 32'd0;

assign B_25_Rst_A = ap_rst_n_inv;

assign B_25_WEN_A = 4'd0;

assign B_26_Addr_A = B_26_Addr_A_orig << 32'd2;

assign B_26_Addr_A_orig = B_26_addr_reg_1907;

assign B_26_Clk_A = ap_clk;

assign B_26_Din_A = 32'd0;

assign B_26_Rst_A = ap_rst_n_inv;

assign B_26_WEN_A = 4'd0;

assign B_2_Addr_A = B_2_Addr_A_orig << 32'd2;

assign B_2_Addr_A_orig = B_2_addr_reg_1787;

assign B_2_Clk_A = ap_clk;

assign B_2_Din_A = 32'd0;

assign B_2_Rst_A = ap_rst_n_inv;

assign B_2_WEN_A = 4'd0;

assign B_3_Addr_A = B_3_Addr_A_orig << 32'd2;

assign B_3_Addr_A_orig = B_3_addr_reg_1792;

assign B_3_Clk_A = ap_clk;

assign B_3_Din_A = 32'd0;

assign B_3_Rst_A = ap_rst_n_inv;

assign B_3_WEN_A = 4'd0;

assign B_4_Addr_A = B_4_Addr_A_orig << 32'd2;

assign B_4_Addr_A_orig = B_4_addr_reg_1797;

assign B_4_Clk_A = ap_clk;

assign B_4_Din_A = 32'd0;

assign B_4_Rst_A = ap_rst_n_inv;

assign B_4_WEN_A = 4'd0;

assign B_5_Addr_A = B_5_Addr_A_orig << 32'd2;

assign B_5_Addr_A_orig = B_5_addr_reg_1802;

assign B_5_Clk_A = ap_clk;

assign B_5_Din_A = 32'd0;

assign B_5_Rst_A = ap_rst_n_inv;

assign B_5_WEN_A = 4'd0;

assign B_6_Addr_A = B_6_Addr_A_orig << 32'd2;

assign B_6_Addr_A_orig = B_6_addr_reg_1807;

assign B_6_Clk_A = ap_clk;

assign B_6_Din_A = 32'd0;

assign B_6_Rst_A = ap_rst_n_inv;

assign B_6_WEN_A = 4'd0;

assign B_7_Addr_A = B_7_Addr_A_orig << 32'd2;

assign B_7_Addr_A_orig = B_7_addr_reg_1812;

assign B_7_Clk_A = ap_clk;

assign B_7_Din_A = 32'd0;

assign B_7_Rst_A = ap_rst_n_inv;

assign B_7_WEN_A = 4'd0;

assign B_8_Addr_A = B_8_Addr_A_orig << 32'd2;

assign B_8_Addr_A_orig = B_8_addr_reg_1817;

assign B_8_Clk_A = ap_clk;

assign B_8_Din_A = 32'd0;

assign B_8_Rst_A = ap_rst_n_inv;

assign B_8_WEN_A = 4'd0;

assign B_9_Addr_A = B_9_Addr_A_orig << 32'd2;

assign B_9_Addr_A_orig = B_9_addr_reg_1822;

assign B_9_Clk_A = ap_clk;

assign B_9_Din_A = 32'd0;

assign B_9_Rst_A = ap_rst_n_inv;

assign B_9_WEN_A = 4'd0;

assign C_1_ack_in = C_1_state[1'd1];

assign C_1_ack_out = C_TREADY;

assign C_1_load_A = (C_1_state_cmp_full & ~C_1_sel_wr);

assign C_1_load_B = (C_1_sel_wr & C_1_state_cmp_full);

assign C_1_sel = C_1_sel_rd;

assign C_1_state_cmp_full = ((C_1_state != 2'd1) ? 1'b1 : 1'b0);

assign C_1_vld_out = C_1_state[1'd0];

assign C_TDATA = C_1_data_out;

assign C_TVALID = C_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state17_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state17_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state18_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state18_io));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((1'd0 == tmp_6_reg_1912) & (1'b0 == C_1_ack_in));
end

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((1'd0 == ap_reg_pp0_iter1_tmp_6_reg_1912) & (1'b0 == C_1_ack_in));
end

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign center_x_1_fu_838_p2 = (center_x_mid2_fu_747_p3 + 8'd1);

assign center_x_cast1_fu_800_p1 = center_x_mid2_fu_747_p3;

assign center_x_cast_fu_804_p1 = center_x_mid2_fu_747_p3;

assign center_x_mid2_fu_747_p3 = ((tmp_3_fu_741_p2[0:0] === 1'b1) ? 8'd0 : center_x_reg_707);

assign center_y_1_fu_1108_p2 = (center_y_phi_fu_722_p4 + 8'd1);

assign center_y_cast1_fu_1118_p1 = center_y_phi_fu_722_p4;

assign center_y_cast_fu_1114_p1 = center_y_phi_fu_722_p4;

assign channel_out2_mid2_fu_769_p1 = channel_out2_mid2_v_fu_761_p3;

assign channel_out2_mid2_v_fu_761_p3 = ((tmp_3_fu_741_p2[0:0] === 1'b1) ? channel_out_s_fu_755_p2 : channel_out_reg_696);

assign channel_out_s_fu_755_p2 = (channel_out_reg_696 + 6'd1);

assign exitcond_flatten_fu_729_p2 = ((indvar_flatten_reg_685 == 13'd7104) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_735_p2 = (indvar_flatten_reg_685 + 13'd1);

assign input_coords_0_0_1_c_fu_1142_p1 = $signed(input_coords_0_0_1_fu_1136_p2);

assign input_coords_0_0_1_fu_1136_p2 = (input_coords_fu_1122_p2 + 17'd1);

assign input_coords_0_0_2_c_fu_1183_p1 = $signed(input_coords_0_0_2_fu_1178_p2);

assign input_coords_0_0_2_fu_1178_p2 = (input_coords_reg_1930 + 17'd2);

assign input_coords_0_1_1_c_fu_1238_p1 = $signed(input_coords_0_1_1_fu_1233_p2);

assign input_coords_0_1_1_fu_1233_p2 = (input_coords_0_1_reg_1981 + 17'd1);

assign input_coords_0_1_2_c_fu_1252_p1 = $signed(input_coords_0_1_2_fu_1247_p2);

assign input_coords_0_1_2_fu_1247_p2 = (input_coords_0_1_reg_1981 + 17'd2);

assign input_coords_0_1_cas_fu_1196_p1 = $signed(input_coords_0_1_fu_1192_p2);

assign input_coords_0_1_fu_1192_p2 = (tmp_12_0_1_reg_1737 + center_y_cast1_reg_1921);

assign input_coords_0_2_1_c_fu_1291_p1 = $signed(input_coords_0_2_1_fu_1286_p2);

assign input_coords_0_2_1_fu_1286_p2 = (input_coords_0_2_reg_1992 + 17'd1);

assign input_coords_0_2_2_c_fu_1338_p1 = $signed(input_coords_0_2_2_fu_1333_p2);

assign input_coords_0_2_2_fu_1333_p2 = (input_coords_0_2_reg_1992 + 17'd2);

assign input_coords_0_2_cas_fu_1278_p1 = $signed(input_coords_0_2_reg_1992);

assign input_coords_0_2_fu_1205_p2 = (tmp_12_0_2_reg_1742 + center_y_cast1_reg_1921);

assign input_coords_0_cast_fu_1127_p1 = $signed(input_coords_fu_1122_p2);

assign input_coords_1_0_1_fu_1363_p2 = (input_coords_1_reg_1999 + 17'd1);

assign input_coords_1_0_2_fu_1373_p2 = (input_coords_1_reg_1999 + 17'd2);

assign input_coords_1_1_1_fu_1404_p2 = (input_coords_1_1_reg_2006 + 17'd1);

assign input_coords_1_1_2_fu_1426_p2 = (input_coords_1_1_reg_2006 + 17'd2);

assign input_coords_1_1_fu_1213_p2 = (tmp_12_1_1_reg_1752 + center_y_cast1_reg_1921);

assign input_coords_1_2_1_fu_1477_p2 = (input_coords_1_2_reg_2013 + 17'd1);

assign input_coords_1_2_2_fu_1487_p2 = (input_coords_1_2_reg_2013 + 17'd2);

assign input_coords_1_2_fu_1217_p2 = (tmp_12_1_2_reg_1757 + center_y_cast1_reg_1921);

assign input_coords_1_fu_1209_p2 = (tmp_12_1_reg_1747 + center_y_cast1_reg_1921);

assign input_coords_2_0_1_fu_1524_p2 = (input_coords_2_reg_1945 + 18'd1);

assign input_coords_2_0_2_fu_1546_p2 = (input_coords_2_reg_1945 + 18'd2);

assign input_coords_2_1_1_fu_1588_p2 = (input_coords_2_1_reg_1952 + 18'd1);

assign input_coords_2_1_2_fu_1598_p2 = (input_coords_2_1_reg_1952 + 18'd2);

assign input_coords_2_1_fu_1156_p2 = (tmp_12_2_1_reg_1767 + center_y_cast_fu_1114_p1);

assign input_coords_2_2_1_fu_1624_p2 = (input_coords_2_2_reg_1959 + 18'd1);

assign input_coords_2_2_2_fu_1651_p2 = (input_coords_2_2_reg_1959 + 18'd2);

assign input_coords_2_2_fu_1161_p2 = (tmp_12_2_2_reg_1772 + center_y_cast_fu_1114_p1);

assign input_coords_2_fu_1151_p2 = (tmp_12_2_reg_1762 + center_y_cast_fu_1114_p1);

assign input_coords_fu_1122_p2 = (tmp_s_reg_1727 + center_y_cast1_fu_1118_p1);

assign p_shl12_0_1_cast_fu_852_p1 = p_shl12_0_1_fu_844_p3;

assign p_shl12_0_1_fu_844_p3 = {{center_x_1_fu_838_p2}, {8'd0}};

assign p_shl12_0_2_cast_fu_888_p1 = p_shl12_0_2_fu_880_p3;

assign p_shl12_0_2_fu_880_p3 = {{tmp_11_0_2_fu_874_p2}, {8'd0}};

assign p_shl12_1_1_fu_948_p3 = {{tmp_11_1_1_fu_942_p2}, {8'd0}};

assign p_shl12_1_2_fu_980_p3 = {{tmp_11_1_2_fu_974_p2}, {8'd0}};

assign p_shl12_1_fu_916_p3 = {{tmp_11_1_fu_910_p2}, {8'd0}};

assign p_shl12_2_1_fu_1044_p3 = {{tmp_11_2_1_fu_1038_p2}, {8'd0}};

assign p_shl12_2_2_fu_1076_p3 = {{tmp_11_2_2_fu_1070_p2}, {8'd0}};

assign p_shl12_2_fu_1012_p3 = {{tmp_11_2_fu_1006_p2}, {8'd0}};

assign p_shl12_cast_fu_816_p1 = p_shl_fu_808_p3;

assign p_shl13_0_1_cast_fu_864_p1 = p_shl13_0_1_fu_856_p3;

assign p_shl13_0_1_fu_856_p3 = {{center_x_1_fu_838_p2}, {5'd0}};

assign p_shl13_0_2_cast_fu_900_p1 = p_shl13_0_2_fu_892_p3;

assign p_shl13_0_2_fu_892_p3 = {{tmp_11_0_2_fu_874_p2}, {5'd0}};

assign p_shl13_1_1_cast_fu_964_p1 = p_shl13_1_1_fu_956_p3;

assign p_shl13_1_1_fu_956_p3 = {{tmp_11_1_1_fu_942_p2}, {5'd0}};

assign p_shl13_1_2_cast_fu_996_p1 = p_shl13_1_2_fu_988_p3;

assign p_shl13_1_2_fu_988_p3 = {{tmp_11_1_2_fu_974_p2}, {5'd0}};

assign p_shl13_1_cast_fu_932_p1 = p_shl13_1_fu_924_p3;

assign p_shl13_1_fu_924_p3 = {{tmp_11_1_fu_910_p2}, {5'd0}};

assign p_shl13_2_1_cast_fu_1060_p1 = p_shl13_2_1_fu_1052_p3;

assign p_shl13_2_1_fu_1052_p3 = {{tmp_11_2_1_fu_1038_p2}, {5'd0}};

assign p_shl13_2_2_cast_fu_1092_p1 = p_shl13_2_2_fu_1084_p3;

assign p_shl13_2_2_fu_1084_p3 = {{tmp_11_2_2_fu_1070_p2}, {5'd0}};

assign p_shl13_2_cast_fu_1028_p1 = p_shl13_2_fu_1020_p3;

assign p_shl13_2_fu_1020_p3 = {{tmp_11_2_fu_1006_p2}, {5'd0}};

assign p_shl13_cast_fu_828_p1 = p_shl1_fu_820_p3;

assign p_shl1_fu_820_p3 = {{center_x_mid2_fu_747_p3}, {5'd0}};

assign p_shl_fu_808_p3 = {{center_x_mid2_fu_747_p3}, {8'd0}};

assign result_3_2_2_2_fu_1706_p2 = (tmp13_fu_1700_p2 + tmp1_fu_1667_p2);

assign tmp10_fu_1453_p2 = (tmp11_fu_1448_p2 + tmp_fu_1444_p2);

assign tmp11_fu_1448_p2 = (tmp_18_1_0_2_reg_2100 + tmp_18_1_1_fu_1414_p2);

assign tmp12_fu_1497_p2 = (tmp_18_1_1_2_fu_1465_p2 + tmp_18_1_2_fu_1471_p2);

assign tmp13_fu_1700_p2 = (tmp20_fu_1694_p2 + tmp14_fu_1671_p2);

assign tmp14_fu_1671_p2 = (tmp17_reg_2180 + tmp15_reg_2145);

assign tmp15_fu_1503_p2 = (tmp12_fu_1497_p2 + tmp_18_1_1_1_reg_2115);

assign tmp16_fu_1560_p2 = (tmp_18_1_2_1_reg_2150 + tmp_18_1_2_2_reg_2155);

assign tmp17_fu_1570_p2 = (tmp18_fu_1564_p2 + tmp16_fu_1560_p2);

assign tmp18_fu_1564_p2 = (tmp_18_2_fu_1534_p2 + tmp_18_2_0_1_fu_1540_p2);

assign tmp19_fu_1634_p2 = (tmp_18_2_1_reg_2190 + tmp_18_2_1_1_fu_1608_p2);

assign tmp1_fu_1667_p2 = (tmp7_reg_2130 + tmp2_reg_2050);

assign tmp20_fu_1694_p2 = (tmp23_fu_1688_p2 + tmp21_fu_1675_p2);

assign tmp21_fu_1675_p2 = (tmp19_reg_2220 + tmp_18_2_0_2_reg_2185);

assign tmp22_fu_1679_p2 = (tmp_18_2_1_2_reg_2205 + tmp_18_2_2_reg_2225);

assign tmp23_fu_1688_p2 = (tmp24_fu_1683_p2 + tmp22_fu_1679_p2);

assign tmp24_fu_1683_p2 = (tmp_18_2_2_1_reg_2230 + tmp_18_2_2_2_fu_1661_p2);

assign tmp2_fu_1315_p2 = (tmp5_fu_1310_p2 + tmp3_fu_1300_p2);

assign tmp3_fu_1300_p2 = (tmp4_reg_2035 + tmp_18_0_0_1_reg_1971);

assign tmp4_fu_1261_p2 = (tmp_4_reg_1966 + tmp_18_0_0_2_fu_1221_p2);

assign tmp5_fu_1310_p2 = (tmp6_fu_1304_p2 + tmp_18_0_1_reg_2020);

assign tmp6_fu_1304_p2 = (tmp_18_0_1_1_fu_1266_p2 + tmp_18_0_1_2_fu_1272_p2);

assign tmp7_fu_1459_p2 = (tmp10_fu_1453_p2 + tmp8_fu_1440_p2);

assign tmp8_fu_1440_p2 = (tmp9_reg_2090 + tmp_18_0_2_reg_2055);

assign tmp9_fu_1383_p2 = (tmp_18_0_2_1_reg_2060 + tmp_18_0_2_2_fu_1351_p2);

assign tmp_11_0_2_fu_874_p2 = (center_x_mid2_fu_747_p3 + 8'd2);

assign tmp_11_1_1_fu_942_p2 = (center_x_cast_fu_804_p1 + 9'd225);

assign tmp_11_1_2_fu_974_p2 = (center_x_cast_fu_804_p1 + 9'd226);

assign tmp_11_1_fu_910_p2 = (center_x_cast_fu_804_p1 + 9'd224);

assign tmp_11_2_1_fu_1038_p2 = (center_x_cast1_fu_800_p1 + 10'd449);

assign tmp_11_2_2_fu_1070_p2 = (center_x_cast1_fu_800_p1 + 10'd450);

assign tmp_11_2_fu_1006_p2 = (center_x_cast1_fu_800_p1 + 10'd448);

assign tmp_12_0_1_fu_868_p2 = (p_shl12_0_1_cast_fu_852_p1 - p_shl13_0_1_cast_fu_864_p1);

assign tmp_12_0_2_fu_904_p2 = (p_shl12_0_2_cast_fu_888_p1 - p_shl13_0_2_cast_fu_900_p1);

assign tmp_12_1_1_fu_968_p2 = (p_shl12_1_1_fu_948_p3 - p_shl13_1_1_cast_fu_964_p1);

assign tmp_12_1_2_fu_1000_p2 = (p_shl12_1_2_fu_980_p3 - p_shl13_1_2_cast_fu_996_p1);

assign tmp_12_1_fu_936_p2 = (p_shl12_1_fu_916_p3 - p_shl13_1_cast_fu_932_p1);

assign tmp_12_2_1_fu_1064_p2 = (p_shl12_2_1_fu_1044_p3 - p_shl13_2_1_cast_fu_1060_p1);

assign tmp_12_2_2_fu_1096_p2 = (p_shl12_2_2_fu_1076_p3 - p_shl13_2_2_cast_fu_1092_p1);

assign tmp_12_2_fu_1032_p2 = (p_shl12_2_fu_1012_p3 - p_shl13_2_cast_fu_1028_p1);

assign tmp_16_0_0_1_fu_1146_p1 = $unsigned(input_coords_0_0_1_c_fu_1142_p1);

assign tmp_16_0_0_2_fu_1187_p1 = $unsigned(input_coords_0_0_2_c_fu_1183_p1);

assign tmp_16_0_1_1_fu_1242_p1 = $unsigned(input_coords_0_1_1_c_fu_1238_p1);

assign tmp_16_0_1_2_fu_1256_p1 = $unsigned(input_coords_0_1_2_c_fu_1252_p1);

assign tmp_16_0_1_fu_1200_p1 = $unsigned(input_coords_0_1_cas_fu_1196_p1);

assign tmp_16_0_2_1_fu_1295_p1 = $unsigned(input_coords_0_2_1_c_fu_1291_p1);

assign tmp_16_0_2_2_fu_1342_p1 = $unsigned(input_coords_0_2_2_c_fu_1338_p1);

assign tmp_16_0_2_fu_1281_p1 = $unsigned(input_coords_0_2_cas_fu_1278_p1);

assign tmp_16_1_0_1_fu_1368_p1 = input_coords_1_0_1_fu_1363_p2;

assign tmp_16_1_0_2_fu_1378_p1 = input_coords_1_0_2_fu_1373_p2;

assign tmp_16_1_1_1_fu_1409_p1 = input_coords_1_1_1_fu_1404_p2;

assign tmp_16_1_1_2_fu_1431_p1 = input_coords_1_1_2_fu_1426_p2;

assign tmp_16_1_1_fu_1400_p1 = input_coords_1_1_reg_2006;

assign tmp_16_1_2_1_fu_1482_p1 = input_coords_1_2_1_fu_1477_p2;

assign tmp_16_1_2_2_fu_1492_p1 = input_coords_1_2_2_fu_1487_p2;

assign tmp_16_1_2_fu_1436_p1 = input_coords_1_2_reg_2013;

assign tmp_16_1_fu_1347_p1 = input_coords_1_reg_1999;

assign tmp_16_2_0_1_fu_1529_p1 = input_coords_2_0_1_fu_1524_p2;

assign tmp_16_2_0_2_fu_1551_p1 = input_coords_2_0_2_fu_1546_p2;

assign tmp_16_2_1_1_fu_1593_p1 = input_coords_2_1_1_fu_1588_p2;

assign tmp_16_2_1_2_fu_1603_p1 = input_coords_2_1_2_fu_1598_p2;

assign tmp_16_2_1_fu_1556_p1 = input_coords_2_1_reg_1952;

assign tmp_16_2_2_1_fu_1629_p1 = input_coords_2_2_1_fu_1624_p2;

assign tmp_16_2_2_2_fu_1656_p1 = input_coords_2_2_2_fu_1651_p2;

assign tmp_16_2_2_fu_1620_p1 = input_coords_2_2_reg_1959;

assign tmp_16_2_fu_1520_p1 = input_coords_2_reg_1945;

assign tmp_18_0_0_1_fu_1172_p0 = B_1_Dout_A;

assign tmp_18_0_0_1_fu_1172_p1 = A_Dout_B;

assign tmp_18_0_0_1_fu_1172_p2 = ($signed(tmp_18_0_0_1_fu_1172_p0) * $signed(tmp_18_0_0_1_fu_1172_p1));

assign tmp_18_0_0_2_fu_1221_p0 = B_2_Dout_A;

assign tmp_18_0_0_2_fu_1221_p1 = A_Dout_A;

assign tmp_18_0_0_2_fu_1221_p2 = ($signed(tmp_18_0_0_2_fu_1221_p0) * $signed(tmp_18_0_0_2_fu_1221_p1));

assign tmp_18_0_1_1_fu_1266_p0 = B_4_Dout_A;

assign tmp_18_0_1_1_fu_1266_p1 = A_Dout_A;

assign tmp_18_0_1_1_fu_1266_p2 = ($signed(tmp_18_0_1_1_fu_1266_p0) * $signed(tmp_18_0_1_1_fu_1266_p1));

assign tmp_18_0_1_2_fu_1272_p0 = B_5_Dout_A;

assign tmp_18_0_1_2_fu_1272_p1 = A_Dout_B;

assign tmp_18_0_1_2_fu_1272_p2 = ($signed(tmp_18_0_1_2_fu_1272_p0) * $signed(tmp_18_0_1_2_fu_1272_p1));

assign tmp_18_0_1_fu_1227_p0 = B_3_Dout_A;

assign tmp_18_0_1_fu_1227_p1 = A_Dout_B;

assign tmp_18_0_1_fu_1227_p2 = ($signed(tmp_18_0_1_fu_1227_p0) * $signed(tmp_18_0_1_fu_1227_p1));

assign tmp_18_0_2_1_fu_1327_p0 = B_7_Dout_A;

assign tmp_18_0_2_1_fu_1327_p1 = A_Dout_B;

assign tmp_18_0_2_1_fu_1327_p2 = ($signed(tmp_18_0_2_1_fu_1327_p0) * $signed(tmp_18_0_2_1_fu_1327_p1));

assign tmp_18_0_2_2_fu_1351_p0 = B_8_Dout_A;

assign tmp_18_0_2_2_fu_1351_p1 = A_Dout_A;

assign tmp_18_0_2_2_fu_1351_p2 = ($signed(tmp_18_0_2_2_fu_1351_p0) * $signed(tmp_18_0_2_2_fu_1351_p1));

assign tmp_18_0_2_fu_1321_p0 = B_6_Dout_A;

assign tmp_18_0_2_fu_1321_p1 = A_Dout_A;

assign tmp_18_0_2_fu_1321_p2 = ($signed(tmp_18_0_2_fu_1321_p0) * $signed(tmp_18_0_2_fu_1321_p1));

assign tmp_18_1_0_1_fu_1388_p0 = B_10_Dout_A;

assign tmp_18_1_0_1_fu_1388_p1 = A_Dout_A;

assign tmp_18_1_0_1_fu_1388_p2 = ($signed(tmp_18_1_0_1_fu_1388_p0) * $signed(tmp_18_1_0_1_fu_1388_p1));

assign tmp_18_1_0_2_fu_1394_p0 = B_11_Dout_A;

assign tmp_18_1_0_2_fu_1394_p1 = A_Dout_B;

assign tmp_18_1_0_2_fu_1394_p2 = ($signed(tmp_18_1_0_2_fu_1394_p0) * $signed(tmp_18_1_0_2_fu_1394_p1));

assign tmp_18_1_1_1_fu_1420_p0 = B_13_Dout_A;

assign tmp_18_1_1_1_fu_1420_p1 = A_Dout_B;

assign tmp_18_1_1_1_fu_1420_p2 = ($signed(tmp_18_1_1_1_fu_1420_p0) * $signed(tmp_18_1_1_1_fu_1420_p1));

assign tmp_18_1_1_2_fu_1465_p0 = B_14_Dout_A;

assign tmp_18_1_1_2_fu_1465_p1 = A_Dout_A;

assign tmp_18_1_1_2_fu_1465_p2 = ($signed(tmp_18_1_1_2_fu_1465_p0) * $signed(tmp_18_1_1_2_fu_1465_p1));

assign tmp_18_1_1_fu_1414_p0 = B_12_Dout_A;

assign tmp_18_1_1_fu_1414_p1 = A_Dout_A;

assign tmp_18_1_1_fu_1414_p2 = ($signed(tmp_18_1_1_fu_1414_p0) * $signed(tmp_18_1_1_fu_1414_p1));

assign tmp_18_1_2_1_fu_1508_p0 = B_16_Dout_A;

assign tmp_18_1_2_1_fu_1508_p1 = A_Dout_A;

assign tmp_18_1_2_1_fu_1508_p2 = ($signed(tmp_18_1_2_1_fu_1508_p0) * $signed(tmp_18_1_2_1_fu_1508_p1));

assign tmp_18_1_2_2_fu_1514_p0 = B_17_Dout_A;

assign tmp_18_1_2_2_fu_1514_p1 = A_Dout_B;

assign tmp_18_1_2_2_fu_1514_p2 = ($signed(tmp_18_1_2_2_fu_1514_p0) * $signed(tmp_18_1_2_2_fu_1514_p1));

assign tmp_18_1_2_fu_1471_p0 = B_15_Dout_A;

assign tmp_18_1_2_fu_1471_p1 = A_Dout_B;

assign tmp_18_1_2_fu_1471_p2 = ($signed(tmp_18_1_2_fu_1471_p0) * $signed(tmp_18_1_2_fu_1471_p1));

assign tmp_18_1_fu_1357_p0 = B_9_Dout_A;

assign tmp_18_1_fu_1357_p1 = A_Dout_B;

assign tmp_18_1_fu_1357_p2 = ($signed(tmp_18_1_fu_1357_p0) * $signed(tmp_18_1_fu_1357_p1));

assign tmp_18_2_0_1_fu_1540_p0 = B_19_Dout_A;

assign tmp_18_2_0_1_fu_1540_p1 = A_Dout_B;

assign tmp_18_2_0_1_fu_1540_p2 = ($signed(tmp_18_2_0_1_fu_1540_p0) * $signed(tmp_18_2_0_1_fu_1540_p1));

assign tmp_18_2_0_2_fu_1576_p0 = B_20_Dout_A;

assign tmp_18_2_0_2_fu_1576_p1 = A_Dout_A;

assign tmp_18_2_0_2_fu_1576_p2 = ($signed(tmp_18_2_0_2_fu_1576_p0) * $signed(tmp_18_2_0_2_fu_1576_p1));

assign tmp_18_2_1_1_fu_1608_p0 = B_22_Dout_A;

assign tmp_18_2_1_1_fu_1608_p1 = A_Dout_A;

assign tmp_18_2_1_1_fu_1608_p2 = ($signed(tmp_18_2_1_1_fu_1608_p0) * $signed(tmp_18_2_1_1_fu_1608_p1));

assign tmp_18_2_1_2_fu_1614_p0 = B_23_Dout_A;

assign tmp_18_2_1_2_fu_1614_p1 = A_Dout_B;

assign tmp_18_2_1_2_fu_1614_p2 = ($signed(tmp_18_2_1_2_fu_1614_p0) * $signed(tmp_18_2_1_2_fu_1614_p1));

assign tmp_18_2_1_fu_1582_p0 = B_21_Dout_A;

assign tmp_18_2_1_fu_1582_p1 = A_Dout_B;

assign tmp_18_2_1_fu_1582_p2 = ($signed(tmp_18_2_1_fu_1582_p0) * $signed(tmp_18_2_1_fu_1582_p1));

assign tmp_18_2_2_1_fu_1645_p0 = B_25_Dout_A;

assign tmp_18_2_2_1_fu_1645_p1 = A_Dout_B;

assign tmp_18_2_2_1_fu_1645_p2 = ($signed(tmp_18_2_2_1_fu_1645_p0) * $signed(tmp_18_2_2_1_fu_1645_p1));

assign tmp_18_2_2_2_fu_1661_p0 = B_26_Dout_A;

assign tmp_18_2_2_2_fu_1661_p1 = A_Dout_A;

assign tmp_18_2_2_2_fu_1661_p2 = ($signed(tmp_18_2_2_2_fu_1661_p0) * $signed(tmp_18_2_2_2_fu_1661_p1));

assign tmp_18_2_2_fu_1639_p0 = B_24_Dout_A;

assign tmp_18_2_2_fu_1639_p1 = A_Dout_A;

assign tmp_18_2_2_fu_1639_p2 = ($signed(tmp_18_2_2_fu_1639_p0) * $signed(tmp_18_2_2_fu_1639_p1));

assign tmp_18_2_fu_1534_p0 = B_18_Dout_A;

assign tmp_18_2_fu_1534_p1 = A_Dout_A;

assign tmp_18_2_fu_1534_p2 = ($signed(tmp_18_2_fu_1534_p0) * $signed(tmp_18_2_fu_1534_p1));

assign tmp_1_fu_1131_p1 = $unsigned(input_coords_0_cast_fu_1127_p1);

assign tmp_3_fu_741_p2 = ((center_x_reg_707 == 8'd222) ? 1'b1 : 1'b0);

assign tmp_4_fu_1166_p0 = B_0_Dout_A;

assign tmp_4_fu_1166_p1 = A_Dout_A;

assign tmp_4_fu_1166_p2 = ($signed(tmp_4_fu_1166_p0) * $signed(tmp_4_fu_1166_p1));

assign tmp_6_fu_1102_p2 = ((center_y_phi_fu_722_p4 == 8'd222) ? 1'b1 : 1'b0);

assign tmp_fu_1444_p2 = (tmp_18_1_reg_2075 + tmp_18_1_0_1_reg_2095);

assign tmp_s_fu_832_p2 = (p_shl12_cast_fu_816_p1 - p_shl13_cast_fu_828_p1);

always @ (posedge ap_clk) begin
    tmp_s_reg_1727[4:0] <= 5'b00000;
    tmp_12_0_1_reg_1737[4:0] <= 5'b00000;
    tmp_12_0_2_reg_1742[4:0] <= 5'b00000;
    tmp_12_1_reg_1747[4:0] <= 5'b00000;
    tmp_12_1_1_reg_1752[4:0] <= 5'b00000;
    tmp_12_1_2_reg_1757[4:0] <= 5'b00000;
    tmp_12_2_reg_1762[4:0] <= 5'b00000;
    tmp_12_2_1_reg_1767[4:0] <= 5'b00000;
    tmp_12_2_2_reg_1772[4:0] <= 5'b00000;
    center_y_cast1_reg_1921[16:8] <= 9'b000000000;
end

endmodule //macc_par_convs
