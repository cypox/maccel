// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="macc_par_convs,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.406000,HLS_SYN_LAT=22079899,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=27,HLS_SYN_FF=628,HLS_SYN_LUT=1550}" *)

module macc_par_convs (
        ap_clk,
        ap_rst_n,
        A_V_Addr_A,
        A_V_EN_A,
        A_V_WEN_A,
        A_V_Din_A,
        A_V_Dout_A,
        A_V_Clk_A,
        A_V_Rst_A,
        A_V_Addr_B,
        A_V_EN_B,
        A_V_WEN_B,
        A_V_Din_B,
        A_V_Dout_B,
        A_V_Clk_B,
        A_V_Rst_B,
        B_0_V_Addr_A,
        B_0_V_EN_A,
        B_0_V_WEN_A,
        B_0_V_Din_A,
        B_0_V_Dout_A,
        B_0_V_Clk_A,
        B_0_V_Rst_A,
        B_1_V_Addr_A,
        B_1_V_EN_A,
        B_1_V_WEN_A,
        B_1_V_Din_A,
        B_1_V_Dout_A,
        B_1_V_Clk_A,
        B_1_V_Rst_A,
        B_2_V_Addr_A,
        B_2_V_EN_A,
        B_2_V_WEN_A,
        B_2_V_Din_A,
        B_2_V_Dout_A,
        B_2_V_Clk_A,
        B_2_V_Rst_A,
        B_3_V_Addr_A,
        B_3_V_EN_A,
        B_3_V_WEN_A,
        B_3_V_Din_A,
        B_3_V_Dout_A,
        B_3_V_Clk_A,
        B_3_V_Rst_A,
        B_4_V_Addr_A,
        B_4_V_EN_A,
        B_4_V_WEN_A,
        B_4_V_Din_A,
        B_4_V_Dout_A,
        B_4_V_Clk_A,
        B_4_V_Rst_A,
        B_5_V_Addr_A,
        B_5_V_EN_A,
        B_5_V_WEN_A,
        B_5_V_Din_A,
        B_5_V_Dout_A,
        B_5_V_Clk_A,
        B_5_V_Rst_A,
        B_6_V_Addr_A,
        B_6_V_EN_A,
        B_6_V_WEN_A,
        B_6_V_Din_A,
        B_6_V_Dout_A,
        B_6_V_Clk_A,
        B_6_V_Rst_A,
        B_7_V_Addr_A,
        B_7_V_EN_A,
        B_7_V_WEN_A,
        B_7_V_Din_A,
        B_7_V_Dout_A,
        B_7_V_Clk_A,
        B_7_V_Rst_A,
        B_8_V_Addr_A,
        B_8_V_EN_A,
        B_8_V_WEN_A,
        B_8_V_Din_A,
        B_8_V_Dout_A,
        B_8_V_Clk_A,
        B_8_V_Rst_A,
        B_9_V_Addr_A,
        B_9_V_EN_A,
        B_9_V_WEN_A,
        B_9_V_Din_A,
        B_9_V_Dout_A,
        B_9_V_Clk_A,
        B_9_V_Rst_A,
        B_10_V_Addr_A,
        B_10_V_EN_A,
        B_10_V_WEN_A,
        B_10_V_Din_A,
        B_10_V_Dout_A,
        B_10_V_Clk_A,
        B_10_V_Rst_A,
        B_11_V_Addr_A,
        B_11_V_EN_A,
        B_11_V_WEN_A,
        B_11_V_Din_A,
        B_11_V_Dout_A,
        B_11_V_Clk_A,
        B_11_V_Rst_A,
        B_12_V_Addr_A,
        B_12_V_EN_A,
        B_12_V_WEN_A,
        B_12_V_Din_A,
        B_12_V_Dout_A,
        B_12_V_Clk_A,
        B_12_V_Rst_A,
        B_13_V_Addr_A,
        B_13_V_EN_A,
        B_13_V_WEN_A,
        B_13_V_Din_A,
        B_13_V_Dout_A,
        B_13_V_Clk_A,
        B_13_V_Rst_A,
        B_14_V_Addr_A,
        B_14_V_EN_A,
        B_14_V_WEN_A,
        B_14_V_Din_A,
        B_14_V_Dout_A,
        B_14_V_Clk_A,
        B_14_V_Rst_A,
        B_15_V_Addr_A,
        B_15_V_EN_A,
        B_15_V_WEN_A,
        B_15_V_Din_A,
        B_15_V_Dout_A,
        B_15_V_Clk_A,
        B_15_V_Rst_A,
        B_16_V_Addr_A,
        B_16_V_EN_A,
        B_16_V_WEN_A,
        B_16_V_Din_A,
        B_16_V_Dout_A,
        B_16_V_Clk_A,
        B_16_V_Rst_A,
        B_17_V_Addr_A,
        B_17_V_EN_A,
        B_17_V_WEN_A,
        B_17_V_Din_A,
        B_17_V_Dout_A,
        B_17_V_Clk_A,
        B_17_V_Rst_A,
        B_18_V_Addr_A,
        B_18_V_EN_A,
        B_18_V_WEN_A,
        B_18_V_Din_A,
        B_18_V_Dout_A,
        B_18_V_Clk_A,
        B_18_V_Rst_A,
        B_19_V_Addr_A,
        B_19_V_EN_A,
        B_19_V_WEN_A,
        B_19_V_Din_A,
        B_19_V_Dout_A,
        B_19_V_Clk_A,
        B_19_V_Rst_A,
        B_20_V_Addr_A,
        B_20_V_EN_A,
        B_20_V_WEN_A,
        B_20_V_Din_A,
        B_20_V_Dout_A,
        B_20_V_Clk_A,
        B_20_V_Rst_A,
        B_21_V_Addr_A,
        B_21_V_EN_A,
        B_21_V_WEN_A,
        B_21_V_Din_A,
        B_21_V_Dout_A,
        B_21_V_Clk_A,
        B_21_V_Rst_A,
        B_22_V_Addr_A,
        B_22_V_EN_A,
        B_22_V_WEN_A,
        B_22_V_Din_A,
        B_22_V_Dout_A,
        B_22_V_Clk_A,
        B_22_V_Rst_A,
        B_23_V_Addr_A,
        B_23_V_EN_A,
        B_23_V_WEN_A,
        B_23_V_Din_A,
        B_23_V_Dout_A,
        B_23_V_Clk_A,
        B_23_V_Rst_A,
        B_24_V_Addr_A,
        B_24_V_EN_A,
        B_24_V_WEN_A,
        B_24_V_Din_A,
        B_24_V_Dout_A,
        B_24_V_Clk_A,
        B_24_V_Rst_A,
        B_25_V_Addr_A,
        B_25_V_EN_A,
        B_25_V_WEN_A,
        B_25_V_Din_A,
        B_25_V_Dout_A,
        B_25_V_Clk_A,
        B_25_V_Rst_A,
        B_26_V_Addr_A,
        B_26_V_EN_A,
        B_26_V_WEN_A,
        B_26_V_Din_A,
        B_26_V_Dout_A,
        B_26_V_Clk_A,
        B_26_V_Rst_A,
        C_V_Addr_A,
        C_V_EN_A,
        C_V_WEN_A,
        C_V_Din_A,
        C_V_Dout_A,
        C_V_Clk_A,
        C_V_Rst_A,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_pp0_stage0 = 17'd4;
parameter    ap_ST_fsm_pp0_stage1 = 17'd8;
parameter    ap_ST_fsm_pp0_stage2 = 17'd16;
parameter    ap_ST_fsm_pp0_stage3 = 17'd32;
parameter    ap_ST_fsm_pp0_stage4 = 17'd64;
parameter    ap_ST_fsm_pp0_stage5 = 17'd128;
parameter    ap_ST_fsm_pp0_stage6 = 17'd256;
parameter    ap_ST_fsm_pp0_stage7 = 17'd512;
parameter    ap_ST_fsm_pp0_stage8 = 17'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 17'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 17'd32768;
parameter    ap_ST_fsm_state18 = 17'd65536;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] A_V_Addr_A;
output   A_V_EN_A;
output  [0:0] A_V_WEN_A;
output  [7:0] A_V_Din_A;
input  [7:0] A_V_Dout_A;
output   A_V_Clk_A;
output   A_V_Rst_A;
output  [31:0] A_V_Addr_B;
output   A_V_EN_B;
output  [0:0] A_V_WEN_B;
output  [7:0] A_V_Din_B;
input  [7:0] A_V_Dout_B;
output   A_V_Clk_B;
output   A_V_Rst_B;
output  [31:0] B_0_V_Addr_A;
output   B_0_V_EN_A;
output  [0:0] B_0_V_WEN_A;
output  [7:0] B_0_V_Din_A;
input  [7:0] B_0_V_Dout_A;
output   B_0_V_Clk_A;
output   B_0_V_Rst_A;
output  [31:0] B_1_V_Addr_A;
output   B_1_V_EN_A;
output  [0:0] B_1_V_WEN_A;
output  [7:0] B_1_V_Din_A;
input  [7:0] B_1_V_Dout_A;
output   B_1_V_Clk_A;
output   B_1_V_Rst_A;
output  [31:0] B_2_V_Addr_A;
output   B_2_V_EN_A;
output  [0:0] B_2_V_WEN_A;
output  [7:0] B_2_V_Din_A;
input  [7:0] B_2_V_Dout_A;
output   B_2_V_Clk_A;
output   B_2_V_Rst_A;
output  [31:0] B_3_V_Addr_A;
output   B_3_V_EN_A;
output  [0:0] B_3_V_WEN_A;
output  [7:0] B_3_V_Din_A;
input  [7:0] B_3_V_Dout_A;
output   B_3_V_Clk_A;
output   B_3_V_Rst_A;
output  [31:0] B_4_V_Addr_A;
output   B_4_V_EN_A;
output  [0:0] B_4_V_WEN_A;
output  [7:0] B_4_V_Din_A;
input  [7:0] B_4_V_Dout_A;
output   B_4_V_Clk_A;
output   B_4_V_Rst_A;
output  [31:0] B_5_V_Addr_A;
output   B_5_V_EN_A;
output  [0:0] B_5_V_WEN_A;
output  [7:0] B_5_V_Din_A;
input  [7:0] B_5_V_Dout_A;
output   B_5_V_Clk_A;
output   B_5_V_Rst_A;
output  [31:0] B_6_V_Addr_A;
output   B_6_V_EN_A;
output  [0:0] B_6_V_WEN_A;
output  [7:0] B_6_V_Din_A;
input  [7:0] B_6_V_Dout_A;
output   B_6_V_Clk_A;
output   B_6_V_Rst_A;
output  [31:0] B_7_V_Addr_A;
output   B_7_V_EN_A;
output  [0:0] B_7_V_WEN_A;
output  [7:0] B_7_V_Din_A;
input  [7:0] B_7_V_Dout_A;
output   B_7_V_Clk_A;
output   B_7_V_Rst_A;
output  [31:0] B_8_V_Addr_A;
output   B_8_V_EN_A;
output  [0:0] B_8_V_WEN_A;
output  [7:0] B_8_V_Din_A;
input  [7:0] B_8_V_Dout_A;
output   B_8_V_Clk_A;
output   B_8_V_Rst_A;
output  [31:0] B_9_V_Addr_A;
output   B_9_V_EN_A;
output  [0:0] B_9_V_WEN_A;
output  [7:0] B_9_V_Din_A;
input  [7:0] B_9_V_Dout_A;
output   B_9_V_Clk_A;
output   B_9_V_Rst_A;
output  [31:0] B_10_V_Addr_A;
output   B_10_V_EN_A;
output  [0:0] B_10_V_WEN_A;
output  [7:0] B_10_V_Din_A;
input  [7:0] B_10_V_Dout_A;
output   B_10_V_Clk_A;
output   B_10_V_Rst_A;
output  [31:0] B_11_V_Addr_A;
output   B_11_V_EN_A;
output  [0:0] B_11_V_WEN_A;
output  [7:0] B_11_V_Din_A;
input  [7:0] B_11_V_Dout_A;
output   B_11_V_Clk_A;
output   B_11_V_Rst_A;
output  [31:0] B_12_V_Addr_A;
output   B_12_V_EN_A;
output  [0:0] B_12_V_WEN_A;
output  [7:0] B_12_V_Din_A;
input  [7:0] B_12_V_Dout_A;
output   B_12_V_Clk_A;
output   B_12_V_Rst_A;
output  [31:0] B_13_V_Addr_A;
output   B_13_V_EN_A;
output  [0:0] B_13_V_WEN_A;
output  [7:0] B_13_V_Din_A;
input  [7:0] B_13_V_Dout_A;
output   B_13_V_Clk_A;
output   B_13_V_Rst_A;
output  [31:0] B_14_V_Addr_A;
output   B_14_V_EN_A;
output  [0:0] B_14_V_WEN_A;
output  [7:0] B_14_V_Din_A;
input  [7:0] B_14_V_Dout_A;
output   B_14_V_Clk_A;
output   B_14_V_Rst_A;
output  [31:0] B_15_V_Addr_A;
output   B_15_V_EN_A;
output  [0:0] B_15_V_WEN_A;
output  [7:0] B_15_V_Din_A;
input  [7:0] B_15_V_Dout_A;
output   B_15_V_Clk_A;
output   B_15_V_Rst_A;
output  [31:0] B_16_V_Addr_A;
output   B_16_V_EN_A;
output  [0:0] B_16_V_WEN_A;
output  [7:0] B_16_V_Din_A;
input  [7:0] B_16_V_Dout_A;
output   B_16_V_Clk_A;
output   B_16_V_Rst_A;
output  [31:0] B_17_V_Addr_A;
output   B_17_V_EN_A;
output  [0:0] B_17_V_WEN_A;
output  [7:0] B_17_V_Din_A;
input  [7:0] B_17_V_Dout_A;
output   B_17_V_Clk_A;
output   B_17_V_Rst_A;
output  [31:0] B_18_V_Addr_A;
output   B_18_V_EN_A;
output  [0:0] B_18_V_WEN_A;
output  [7:0] B_18_V_Din_A;
input  [7:0] B_18_V_Dout_A;
output   B_18_V_Clk_A;
output   B_18_V_Rst_A;
output  [31:0] B_19_V_Addr_A;
output   B_19_V_EN_A;
output  [0:0] B_19_V_WEN_A;
output  [7:0] B_19_V_Din_A;
input  [7:0] B_19_V_Dout_A;
output   B_19_V_Clk_A;
output   B_19_V_Rst_A;
output  [31:0] B_20_V_Addr_A;
output   B_20_V_EN_A;
output  [0:0] B_20_V_WEN_A;
output  [7:0] B_20_V_Din_A;
input  [7:0] B_20_V_Dout_A;
output   B_20_V_Clk_A;
output   B_20_V_Rst_A;
output  [31:0] B_21_V_Addr_A;
output   B_21_V_EN_A;
output  [0:0] B_21_V_WEN_A;
output  [7:0] B_21_V_Din_A;
input  [7:0] B_21_V_Dout_A;
output   B_21_V_Clk_A;
output   B_21_V_Rst_A;
output  [31:0] B_22_V_Addr_A;
output   B_22_V_EN_A;
output  [0:0] B_22_V_WEN_A;
output  [7:0] B_22_V_Din_A;
input  [7:0] B_22_V_Dout_A;
output   B_22_V_Clk_A;
output   B_22_V_Rst_A;
output  [31:0] B_23_V_Addr_A;
output   B_23_V_EN_A;
output  [0:0] B_23_V_WEN_A;
output  [7:0] B_23_V_Din_A;
input  [7:0] B_23_V_Dout_A;
output   B_23_V_Clk_A;
output   B_23_V_Rst_A;
output  [31:0] B_24_V_Addr_A;
output   B_24_V_EN_A;
output  [0:0] B_24_V_WEN_A;
output  [7:0] B_24_V_Din_A;
input  [7:0] B_24_V_Dout_A;
output   B_24_V_Clk_A;
output   B_24_V_Rst_A;
output  [31:0] B_25_V_Addr_A;
output   B_25_V_EN_A;
output  [0:0] B_25_V_WEN_A;
output  [7:0] B_25_V_Din_A;
input  [7:0] B_25_V_Dout_A;
output   B_25_V_Clk_A;
output   B_25_V_Rst_A;
output  [31:0] B_26_V_Addr_A;
output   B_26_V_EN_A;
output  [0:0] B_26_V_WEN_A;
output  [7:0] B_26_V_Din_A;
input  [7:0] B_26_V_Dout_A;
output   B_26_V_Clk_A;
output   B_26_V_Rst_A;
output  [31:0] C_V_Addr_A;
output   C_V_EN_A;
output  [0:0] C_V_WEN_A;
output  [7:0] C_V_Din_A;
input  [7:0] C_V_Dout_A;
output   C_V_Clk_A;
output   C_V_Rst_A;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg A_V_EN_A;
reg A_V_EN_B;
reg B_0_V_EN_A;
reg B_1_V_EN_A;
reg B_2_V_EN_A;
reg B_3_V_EN_A;
reg B_4_V_EN_A;
reg B_5_V_EN_A;
reg B_6_V_EN_A;
reg B_7_V_EN_A;
reg B_8_V_EN_A;
reg B_9_V_EN_A;
reg B_10_V_EN_A;
reg B_11_V_EN_A;
reg B_12_V_EN_A;
reg B_13_V_EN_A;
reg B_14_V_EN_A;
reg B_15_V_EN_A;
reg B_16_V_EN_A;
reg B_17_V_EN_A;
reg B_18_V_EN_A;
reg B_19_V_EN_A;
reg B_20_V_EN_A;
reg B_21_V_EN_A;
reg B_22_V_EN_A;
reg B_23_V_EN_A;
reg B_24_V_EN_A;
reg B_25_V_EN_A;
reg B_26_V_EN_A;
reg C_V_EN_A;
reg[0:0] C_V_WEN_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [12:0] indvar_flatten_reg_747;
reg   [7:0] shift_y_reg_758;
reg   [5:0] channel_out_reg_769;
wire   [15:0] next_mul_fu_780_p2;
reg   [15:0] next_mul_reg_2372;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_786_p2;
wire   [7:0] center_x_fu_792_p2;
reg   [7:0] center_x_reg_2381;
wire   [20:0] output_x_coords_cast_fu_806_p1;
reg   [20:0] output_x_coords_cast_reg_2386;
wire   [16:0] tmp_s_fu_834_p2;
reg   [16:0] tmp_s_reg_2391;
wire   [16:0] tmp_10_0_1_fu_864_p2;
reg   [16:0] tmp_10_0_1_reg_2396;
wire   [16:0] tmp_10_0_2_fu_900_p2;
reg   [16:0] tmp_10_0_2_reg_2401;
wire   [16:0] tmp_10_1_fu_932_p2;
reg   [16:0] tmp_10_1_reg_2406;
wire   [16:0] tmp_10_1_1_fu_964_p2;
reg   [16:0] tmp_10_1_1_reg_2411;
wire   [16:0] tmp_10_1_2_fu_996_p2;
reg   [16:0] tmp_10_1_2_reg_2416;
wire   [17:0] tmp_10_2_fu_1028_p2;
reg   [17:0] tmp_10_2_reg_2421;
wire   [17:0] tmp_10_2_1_fu_1060_p2;
reg   [17:0] tmp_10_2_1_reg_2426;
wire   [17:0] tmp_10_2_2_fu_1092_p2;
reg   [17:0] tmp_10_2_2_reg_2431;
wire   [0:0] exitcond_flatten_fu_1098_p2;
reg   [0:0] exitcond_flatten_reg_2436;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] indvar_flatten_next_fu_1104_p2;
reg   [12:0] indvar_flatten_next_reg_2440;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] shift_y_cast6_mid2_v_fu_1130_p3;
reg   [7:0] shift_y_cast6_mid2_v_reg_2445;
wire   [16:0] tmp_14_mid2_v_v_fu_1146_p2;
reg   [16:0] tmp_14_mid2_v_v_reg_2451;
wire   [16:0] tmp_14_0_1_mid2_v_v_fu_1175_p2;
reg   [16:0] tmp_14_0_1_mid2_v_v_reg_2456;
wire   [16:0] tmp_14_0_2_mid2_v_v_fu_1180_p2;
reg   [16:0] tmp_14_0_2_mid2_v_v_reg_2463;
wire   [16:0] tmp_14_1_mid2_v_fu_1185_p2;
reg   [16:0] tmp_14_1_mid2_v_reg_2470;
wire   [16:0] tmp_14_1_1_mid2_v_fu_1190_p2;
reg   [16:0] tmp_14_1_1_mid2_v_reg_2477;
wire   [16:0] tmp_14_1_2_mid2_v_fu_1195_p2;
reg   [16:0] tmp_14_1_2_mid2_v_reg_2484;
(* use_dsp48 = "no" *) wire   [20:0] output_coords_fu_1204_p2;
reg   [20:0] output_coords_reg_2491;
wire   [63:0] channel_out1_fu_1208_p1;
reg   [63:0] channel_out1_reg_2501;
wire   [5:0] channel_out_1_fu_1214_p2;
reg   [5:0] channel_out_1_reg_2545;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] tmp_4_reg_2560;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] tmp_8_reg_2585;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] tmp_10_reg_2610;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] tmp_12_reg_2635;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [7:0] tmp_14_reg_2660;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
reg   [7:0] tmp_16_reg_2685;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg   [7:0] tmp_18_reg_2710;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
reg   [7:0] tmp_20_reg_2735;
wire   [17:0] tmp_14_2_mid2_v_fu_1773_p2;
reg   [17:0] tmp_14_2_mid2_v_reg_2750;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [17:0] tmp_14_2_1_mid2_v_fu_1794_p2;
reg   [17:0] tmp_14_2_1_mid2_v_reg_2755;
wire   [17:0] tmp_14_2_2_mid2_v_fu_1799_p2;
reg   [17:0] tmp_14_2_2_mid2_v_reg_2762;
reg   [7:0] tmp_22_reg_2779;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg  signed [7:0] B_20_V_load_reg_2834;
reg   [7:0] tmp_24_reg_2839;
reg  signed [7:0] B_21_V_load_reg_2849;
reg  signed [7:0] B_22_V_load_reg_2854;
reg  signed [7:0] B_23_V_load_reg_2859;
reg  signed [7:0] B_24_V_load_reg_2864;
reg  signed [7:0] B_25_V_load_reg_2869;
reg  signed [7:0] B_26_V_load_reg_2874;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [7:0] tmp_26_reg_2884;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state15_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [7:0] tmp_28_reg_2899;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state16_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
reg   [7:0] tmp_30_reg_2914;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage13_subdone;
reg   [7:0] shift_x_reg_725;
wire    ap_CS_fsm_state18;
reg   [15:0] output_x_coords_reg_736;
reg   [12:0] indvar_flatten_phi_fu_751_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] shift_y_phi_fu_762_p4;
reg   [5:0] channel_out_phi_fu_773_p4;
wire   [63:0] tmp_14_mid2_fu_1155_p1;
wire   [63:0] tmp_14_0_0_1_mid2_fu_1170_p1;
wire   [63:0] tmp_14_0_0_2_mid2_fu_1229_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_14_0_1_mid2_fu_1237_p1;
wire   [63:0] tmp_14_0_1_1_mid2_fu_1300_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_14_0_1_2_mid2_fu_1314_p1;
wire   [63:0] tmp_14_0_2_mid2_fu_1371_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_14_0_2_1_mid2_fu_1385_p1;
wire   [63:0] tmp_14_0_2_2_mid2_fu_1448_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_14_1_mid2_fu_1453_p1;
wire   [63:0] tmp_14_1_0_1_mid2_fu_1511_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_14_1_0_2_mid2_fu_1521_p1;
wire   [63:0] tmp_14_1_1_mid2_fu_1575_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] tmp_14_1_1_1_mid2_fu_1584_p1;
wire   [63:0] tmp_14_1_1_2_mid2_fu_1643_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] tmp_14_1_2_mid2_fu_1648_p1;
wire   [63:0] tmp_14_1_2_1_mid2_fu_1706_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] tmp_14_1_2_2_mid2_fu_1716_p1;
wire   [63:0] tmp_14_2_mid2_fu_1778_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] tmp_14_2_0_1_mid2_fu_1789_p1;
wire   [63:0] tmp_14_2_0_2_mid2_fu_1858_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] tmp_14_2_1_mid2_fu_1863_p1;
wire   [63:0] tmp_14_2_1_1_mid2_fu_1921_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] tmp_14_2_1_2_mid2_fu_1931_p1;
wire   [63:0] tmp_14_2_2_mid2_fu_1983_p1;
wire    ap_block_pp0_stage12;
wire   [63:0] tmp_14_2_2_1_mid2_fu_1992_p1;
wire   [63:0] tmp_14_2_2_2_mid2_fu_2049_p1;
wire    ap_block_pp0_stage13;
wire   [63:0] tmp_7_fu_2125_p1;
reg   [31:0] A_V_Addr_A_orig;
reg   [31:0] A_V_Addr_B_orig;
wire   [31:0] B_0_V_Addr_A_orig;
wire   [31:0] B_1_V_Addr_A_orig;
wire   [31:0] B_2_V_Addr_A_orig;
wire   [31:0] B_3_V_Addr_A_orig;
wire   [31:0] B_4_V_Addr_A_orig;
wire   [31:0] B_5_V_Addr_A_orig;
wire   [31:0] B_6_V_Addr_A_orig;
wire   [31:0] B_7_V_Addr_A_orig;
wire   [31:0] B_8_V_Addr_A_orig;
wire   [31:0] B_9_V_Addr_A_orig;
wire   [31:0] B_10_V_Addr_A_orig;
wire   [31:0] B_11_V_Addr_A_orig;
wire   [31:0] B_12_V_Addr_A_orig;
wire   [31:0] B_13_V_Addr_A_orig;
wire   [31:0] B_14_V_Addr_A_orig;
wire   [31:0] B_15_V_Addr_A_orig;
wire   [31:0] B_16_V_Addr_A_orig;
wire   [31:0] B_17_V_Addr_A_orig;
wire   [31:0] B_18_V_Addr_A_orig;
wire   [31:0] B_19_V_Addr_A_orig;
wire   [31:0] B_20_V_Addr_A_orig;
wire   [31:0] B_21_V_Addr_A_orig;
wire   [31:0] B_22_V_Addr_A_orig;
wire   [31:0] B_23_V_Addr_A_orig;
wire   [31:0] B_24_V_Addr_A_orig;
wire   [31:0] B_25_V_Addr_A_orig;
wire   [31:0] B_26_V_Addr_A_orig;
wire   [31:0] C_V_Addr_A_orig;
wire   [15:0] p_shl_fu_810_p3;
wire   [12:0] p_shl1_fu_822_p3;
wire   [16:0] p_shl13_cast_fu_818_p1;
wire   [16:0] p_shl14_cast_fu_830_p1;
wire   [15:0] p_shl13_0_1_fu_840_p3;
wire   [12:0] p_shl14_0_1_fu_852_p3;
wire   [16:0] p_shl13_0_1_cast_fu_848_p1;
wire   [16:0] p_shl14_0_1_cast_fu_860_p1;
wire   [7:0] tmp_8_0_2_fu_870_p2;
wire   [15:0] p_shl13_0_2_fu_876_p3;
wire   [12:0] p_shl14_0_2_fu_888_p3;
wire   [16:0] p_shl13_0_2_cast_fu_884_p1;
wire   [16:0] p_shl14_0_2_cast_fu_896_p1;
wire   [8:0] shift_x_cast_fu_802_p1;
wire   [8:0] tmp_8_1_fu_906_p2;
wire   [13:0] p_shl14_1_fu_920_p3;
wire   [16:0] p_shl13_1_fu_912_p3;
wire   [16:0] p_shl14_1_cast_fu_928_p1;
wire   [8:0] tmp_8_1_1_fu_938_p2;
wire   [13:0] p_shl14_1_1_fu_952_p3;
wire   [16:0] p_shl13_1_1_fu_944_p3;
wire   [16:0] p_shl14_1_1_cast_fu_960_p1;
wire   [8:0] tmp_8_1_2_fu_970_p2;
wire   [13:0] p_shl14_1_2_fu_984_p3;
wire   [16:0] p_shl13_1_2_fu_976_p3;
wire   [16:0] p_shl14_1_2_cast_fu_992_p1;
wire   [9:0] shift_x_cast1_fu_798_p1;
wire   [9:0] tmp_8_2_fu_1002_p2;
wire   [14:0] p_shl14_2_fu_1016_p3;
wire   [17:0] p_shl13_2_fu_1008_p3;
wire   [17:0] p_shl14_2_cast_fu_1024_p1;
wire   [9:0] tmp_8_2_1_fu_1034_p2;
wire   [14:0] p_shl14_2_1_fu_1048_p3;
wire   [17:0] p_shl13_2_1_fu_1040_p3;
wire   [17:0] p_shl14_2_1_cast_fu_1056_p1;
wire   [9:0] tmp_8_2_2_fu_1066_p2;
wire   [14:0] p_shl14_2_2_fu_1080_p3;
wire   [17:0] p_shl13_2_2_fu_1072_p3;
wire   [17:0] p_shl14_2_2_cast_fu_1088_p1;
wire   [0:0] tmp_3_fu_1110_p2;
wire   [7:0] center_y_fu_1124_p2;
wire   [16:0] tmp_14_mid2_v_v_v_fu_1142_p1;
wire  signed [31:0] tmp_14_mid2_v_fu_1151_p1;
wire   [16:0] tmp_14_0_0_1_mid2_v_s_fu_1160_p2;
wire  signed [31:0] tmp_14_0_0_1_mid2_v_fu_1166_p1;
wire   [5:0] channel_out_mid2_fu_1116_p3;
wire   [20:0] grp_fu_2129_p3;
wire   [16:0] tmp_14_0_0_2_mid2_v_s_fu_1220_p2;
wire  signed [31:0] tmp_14_0_0_2_mid2_v_fu_1225_p1;
wire  signed [31:0] tmp_14_0_1_mid2_v_fu_1234_p1;
wire  signed [7:0] p_Val2_1_fu_1250_p0;
wire  signed [7:0] p_Val2_1_fu_1250_p1;
wire   [11:0] p_Val2_1_fu_1250_p2;
wire   [7:0] tmp_1_fu_1264_p4;
wire  signed [11:0] grp_fu_2138_p3;
wire   [16:0] tmp_14_0_1_1_mid2_v_s_fu_1291_p2;
wire  signed [31:0] tmp_14_0_1_1_mid2_v_fu_1296_p1;
wire   [16:0] tmp_14_0_1_2_mid2_v_s_fu_1305_p2;
wire  signed [31:0] tmp_14_0_1_2_mid2_v_fu_1310_p1;
wire  signed [11:0] grp_fu_2147_p3;
wire   [7:0] tmp_6_fu_1342_p4;
wire  signed [11:0] grp_fu_2156_p3;
wire  signed [31:0] tmp_14_0_2_mid2_v_fu_1368_p1;
wire   [16:0] tmp_14_0_2_1_mid2_v_s_fu_1376_p2;
wire  signed [31:0] tmp_14_0_2_1_mid2_v_fu_1381_p1;
wire  signed [11:0] grp_fu_2165_p3;
wire   [7:0] tmp_9_fu_1413_p4;
wire  signed [11:0] grp_fu_2174_p3;
wire   [16:0] tmp_14_0_2_2_mid2_v_s_fu_1439_p2;
wire  signed [31:0] tmp_14_0_2_2_mid2_v_fu_1444_p1;
wire  signed [11:0] grp_fu_2183_p3;
wire   [7:0] tmp_11_fu_1480_p4;
wire  signed [11:0] grp_fu_2192_p3;
wire   [16:0] tmp_14_1_0_1_mid2_v_fu_1506_p2;
wire   [16:0] tmp_14_1_0_2_mid2_v_fu_1516_p2;
wire  signed [11:0] grp_fu_2201_p3;
wire   [7:0] tmp_13_fu_1549_p4;
wire  signed [11:0] grp_fu_2210_p3;
wire   [16:0] tmp_14_1_1_1_mid2_v_fu_1579_p2;
wire  signed [11:0] grp_fu_2219_p3;
wire   [7:0] tmp_15_fu_1612_p4;
wire  signed [11:0] grp_fu_2228_p3;
wire   [16:0] tmp_14_1_1_2_mid2_v_fu_1638_p2;
wire  signed [11:0] grp_fu_2237_p3;
wire   [7:0] tmp_17_fu_1675_p4;
wire  signed [11:0] grp_fu_2246_p3;
wire   [16:0] tmp_14_1_2_1_mid2_v_fu_1701_p2;
wire   [16:0] tmp_14_1_2_2_mid2_v_fu_1711_p2;
wire  signed [11:0] grp_fu_2255_p3;
wire   [7:0] tmp_19_fu_1744_p4;
wire  signed [11:0] grp_fu_2264_p3;
wire   [17:0] tmp_14_2_mid2_v_v_fu_1770_p1;
wire   [17:0] tmp_14_2_0_1_mid2_v_fu_1783_p2;
wire  signed [11:0] grp_fu_2273_p3;
wire   [7:0] tmp_21_fu_1827_p4;
wire  signed [11:0] grp_fu_2282_p3;
wire   [17:0] tmp_14_2_0_2_mid2_v_fu_1853_p2;
wire  signed [11:0] grp_fu_2291_p3;
wire   [7:0] tmp_23_fu_1890_p4;
wire  signed [11:0] grp_fu_2300_p3;
wire   [17:0] tmp_14_2_1_1_mid2_v_fu_1916_p2;
wire   [17:0] tmp_14_2_1_2_mid2_v_fu_1926_p2;
wire  signed [11:0] grp_fu_2309_p3;
wire   [7:0] tmp_25_fu_1957_p4;
wire  signed [11:0] grp_fu_2318_p3;
wire   [17:0] tmp_14_2_2_1_mid2_v_fu_1987_p2;
wire  signed [11:0] grp_fu_2327_p3;
wire   [7:0] tmp_27_fu_2018_p4;
wire  signed [11:0] grp_fu_2336_p3;
wire   [17:0] tmp_14_2_2_2_mid2_v_fu_2044_p2;
wire  signed [11:0] grp_fu_2345_p3;
wire   [7:0] tmp_29_fu_2075_p4;
wire  signed [11:0] grp_fu_2354_p3;
wire  signed [11:0] grp_fu_2363_p3;
wire   [5:0] grp_fu_2129_p0;
wire   [16:0] grp_fu_2129_p1;
wire   [7:0] grp_fu_2129_p2;
wire   [11:0] grp_fu_2138_p2;
wire   [11:0] grp_fu_2147_p2;
wire   [11:0] grp_fu_2156_p2;
wire   [11:0] grp_fu_2165_p2;
wire   [11:0] grp_fu_2174_p2;
wire   [11:0] grp_fu_2183_p2;
wire   [11:0] grp_fu_2192_p2;
wire   [11:0] grp_fu_2201_p2;
wire   [11:0] grp_fu_2210_p2;
wire   [11:0] grp_fu_2219_p2;
wire   [11:0] grp_fu_2228_p2;
wire   [11:0] grp_fu_2237_p2;
wire   [11:0] grp_fu_2246_p2;
wire   [11:0] grp_fu_2255_p2;
wire   [11:0] grp_fu_2264_p2;
wire   [11:0] grp_fu_2273_p2;
wire   [11:0] grp_fu_2282_p2;
wire   [11:0] grp_fu_2291_p2;
wire   [11:0] grp_fu_2300_p2;
wire   [11:0] grp_fu_2309_p2;
wire   [11:0] grp_fu_2318_p2;
wire   [11:0] grp_fu_2327_p2;
wire   [11:0] grp_fu_2336_p2;
wire   [11:0] grp_fu_2345_p2;
wire   [11:0] grp_fu_2354_p2;
wire   [11:0] grp_fu_2363_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [20:0] grp_fu_2129_p00;
wire   [20:0] grp_fu_2129_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

macc_par_convs_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
macc_par_convs_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

macc_par_convs_mabkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 21 ))
macc_par_convs_mabkb_U1(
    .din0(grp_fu_2129_p0),
    .din1(grp_fu_2129_p1),
    .din2(grp_fu_2129_p2),
    .dout(grp_fu_2129_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U2(
    .din0(B_1_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2138_p2),
    .dout(grp_fu_2138_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U3(
    .din0(B_2_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2147_p2),
    .dout(grp_fu_2147_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U4(
    .din0(B_3_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2156_p2),
    .dout(grp_fu_2156_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U5(
    .din0(B_4_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2165_p2),
    .dout(grp_fu_2165_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U6(
    .din0(B_5_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2174_p2),
    .dout(grp_fu_2174_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U7(
    .din0(B_6_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2183_p2),
    .dout(grp_fu_2183_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U8(
    .din0(B_7_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2192_p2),
    .dout(grp_fu_2192_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U9(
    .din0(B_8_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2201_p2),
    .dout(grp_fu_2201_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U10(
    .din0(B_9_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2210_p2),
    .dout(grp_fu_2210_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U11(
    .din0(B_10_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2219_p2),
    .dout(grp_fu_2219_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U12(
    .din0(B_11_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2228_p2),
    .dout(grp_fu_2228_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U13(
    .din0(B_12_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2237_p2),
    .dout(grp_fu_2237_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U14(
    .din0(B_13_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2246_p2),
    .dout(grp_fu_2246_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U15(
    .din0(B_14_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2255_p2),
    .dout(grp_fu_2255_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U16(
    .din0(B_15_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2264_p2),
    .dout(grp_fu_2264_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U17(
    .din0(B_16_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2273_p2),
    .dout(grp_fu_2273_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U18(
    .din0(B_17_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2282_p2),
    .dout(grp_fu_2282_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U19(
    .din0(B_18_V_Dout_A),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2291_p2),
    .dout(grp_fu_2291_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U20(
    .din0(B_19_V_Dout_A),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2300_p2),
    .dout(grp_fu_2300_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U21(
    .din0(B_20_V_load_reg_2834),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2309_p2),
    .dout(grp_fu_2309_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U22(
    .din0(B_21_V_load_reg_2849),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2318_p2),
    .dout(grp_fu_2318_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U23(
    .din0(B_22_V_load_reg_2854),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2327_p2),
    .dout(grp_fu_2327_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U24(
    .din0(B_23_V_load_reg_2859),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2336_p2),
    .dout(grp_fu_2336_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U25(
    .din0(B_24_V_load_reg_2864),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2345_p2),
    .dout(grp_fu_2345_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U26(
    .din0(B_25_V_load_reg_2869),
    .din1(A_V_Dout_B),
    .din2(grp_fu_2354_p2),
    .dout(grp_fu_2354_p3)
);

macc_par_convs_macud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
macc_par_convs_macud_U27(
    .din0(B_26_V_load_reg_2874),
    .din1(A_V_Dout_A),
    .din2(grp_fu_2363_p2),
    .dout(grp_fu_2363_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_subdone == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_subdone == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        channel_out_reg_769 <= channel_out_1_reg_2545;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
        channel_out_reg_769 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_747 <= indvar_flatten_next_reg_2440;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
        indvar_flatten_reg_747 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_x_coords_reg_736 <= next_mul_reg_2372;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_x_coords_reg_736 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        shift_x_reg_725 <= center_x_reg_2381;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shift_x_reg_725 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        shift_y_reg_758 <= shift_y_cast6_mid2_v_reg_2445;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
        shift_y_reg_758 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0))) begin
        B_20_V_load_reg_2834 <= B_20_V_Dout_A;
        B_21_V_load_reg_2849 <= B_21_V_Dout_A;
        B_22_V_load_reg_2854 <= B_22_V_Dout_A;
        B_23_V_load_reg_2859 <= B_23_V_Dout_A;
        B_24_V_load_reg_2864 <= B_24_V_Dout_A;
        B_25_V_load_reg_2869 <= B_25_V_Dout_A;
        B_26_V_load_reg_2874 <= B_26_V_Dout_A;
        tmp_24_reg_2839 <= {{grp_fu_2300_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        center_x_reg_2381 <= center_x_fu_792_p2;
        next_mul_reg_2372 <= next_mul_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_fu_1098_p2))) begin
        channel_out1_reg_2501[5 : 0] <= channel_out1_fu_1208_p1[5 : 0];
        output_coords_reg_2491 <= output_coords_fu_1204_p2;
        tmp_14_0_1_mid2_v_v_reg_2456 <= tmp_14_0_1_mid2_v_v_fu_1175_p2;
        tmp_14_0_2_mid2_v_v_reg_2463 <= tmp_14_0_2_mid2_v_v_fu_1180_p2;
        tmp_14_1_1_mid2_v_reg_2477 <= tmp_14_1_1_mid2_v_fu_1190_p2;
        tmp_14_1_2_mid2_v_reg_2484 <= tmp_14_1_2_mid2_v_fu_1195_p2;
        tmp_14_1_mid2_v_reg_2470 <= tmp_14_1_mid2_v_fu_1185_p2;
        tmp_14_mid2_v_v_reg_2451 <= tmp_14_mid2_v_v_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_1098_p2))) begin
        channel_out_1_reg_2545 <= channel_out_1_fu_1214_p2;
        shift_y_cast6_mid2_v_reg_2445 <= shift_y_cast6_mid2_v_fu_1130_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        exitcond_flatten_reg_2436 <= exitcond_flatten_fu_1098_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_2440 <= indvar_flatten_next_fu_1104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd0))) begin
        output_x_coords_cast_reg_2386[15 : 0] <= output_x_coords_cast_fu_806_p1[15 : 0];
        tmp_10_0_1_reg_2396[16 : 5] <= tmp_10_0_1_fu_864_p2[16 : 5];
        tmp_10_0_2_reg_2401[16 : 5] <= tmp_10_0_2_fu_900_p2[16 : 5];
        tmp_10_1_1_reg_2411[16 : 5] <= tmp_10_1_1_fu_964_p2[16 : 5];
        tmp_10_1_2_reg_2416[16 : 5] <= tmp_10_1_2_fu_996_p2[16 : 5];
        tmp_10_1_reg_2406[16 : 5] <= tmp_10_1_fu_932_p2[16 : 5];
        tmp_10_2_1_reg_2426[17 : 5] <= tmp_10_2_1_fu_1060_p2[17 : 5];
        tmp_10_2_2_reg_2431[17 : 5] <= tmp_10_2_2_fu_1092_p2[17 : 5];
        tmp_10_2_reg_2421[17 : 5] <= tmp_10_2_fu_1028_p2[17 : 5];
        tmp_s_reg_2391[16 : 5] <= tmp_s_fu_834_p2[16 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        tmp_10_reg_2610 <= {{grp_fu_2174_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        tmp_12_reg_2635 <= {{grp_fu_2192_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        tmp_14_2_1_mid2_v_reg_2755 <= tmp_14_2_1_mid2_v_fu_1794_p2;
        tmp_14_2_2_mid2_v_reg_2762 <= tmp_14_2_2_mid2_v_fu_1799_p2;
        tmp_14_2_mid2_v_reg_2750 <= tmp_14_2_mid2_v_fu_1773_p2;
        tmp_22_reg_2779 <= {{grp_fu_2282_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        tmp_14_reg_2660 <= {{grp_fu_2210_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        tmp_16_reg_2685 <= {{grp_fu_2228_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        tmp_18_reg_2710 <= {{grp_fu_2246_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        tmp_20_reg_2735 <= {{grp_fu_2264_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0))) begin
        tmp_26_reg_2884 <= {{grp_fu_2318_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0))) begin
        tmp_28_reg_2899 <= {{grp_fu_2336_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0))) begin
        tmp_30_reg_2914 <= {{grp_fu_2354_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_flatten_reg_2436))) begin
        tmp_4_reg_2560 <= {{grp_fu_2138_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        tmp_8_reg_2585 <= {{grp_fu_2156_p3[11:4]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_2_2_2_mid2_fu_2049_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_2_2_mid2_fu_1983_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_2_1_1_mid2_fu_1921_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_2_0_2_mid2_fu_1858_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_2_mid2_fu_1778_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_1_2_1_mid2_fu_1706_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_1_1_2_mid2_fu_1643_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_1_1_mid2_fu_1575_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_1_0_1_mid2_fu_1511_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_0_2_2_mid2_fu_1448_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_0_2_mid2_fu_1371_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_0_1_1_mid2_fu_1300_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_0_0_2_mid2_fu_1229_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0))) begin
            A_V_Addr_A_orig = tmp_14_mid2_fu_1155_p1;
        end else begin
            A_V_Addr_A_orig = 'bx;
        end
    end else begin
        A_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_2_2_1_mid2_fu_1992_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_2_1_2_mid2_fu_1931_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_2_1_mid2_fu_1863_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_2_0_1_mid2_fu_1789_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_1_2_2_mid2_fu_1716_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_1_2_mid2_fu_1648_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_1_1_1_mid2_fu_1584_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_1_0_2_mid2_fu_1521_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_1_mid2_fu_1453_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_0_2_1_mid2_fu_1385_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_0_1_2_mid2_fu_1314_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_0_1_mid2_fu_1237_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0))) begin
            A_V_Addr_B_orig = tmp_14_0_0_1_mid2_fu_1170_p1;
        end else begin
            A_V_Addr_B_orig = 'bx;
        end
    end else begin
        A_V_Addr_B_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0)))) begin
        A_V_EN_A = 1'b1;
    end else begin
        A_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0)))) begin
        A_V_EN_B = 1'b1;
    end else begin
        A_V_EN_B = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        B_0_V_EN_A = 1'b1;
    end else begin
        B_0_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        B_10_V_EN_A = 1'b1;
    end else begin
        B_10_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_11001 == 1'b0))) begin
        B_11_V_EN_A = 1'b1;
    end else begin
        B_11_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        B_12_V_EN_A = 1'b1;
    end else begin
        B_12_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_11001 == 1'b0))) begin
        B_13_V_EN_A = 1'b1;
    end else begin
        B_13_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        B_14_V_EN_A = 1'b1;
    end else begin
        B_14_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        B_15_V_EN_A = 1'b1;
    end else begin
        B_15_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        B_16_V_EN_A = 1'b1;
    end else begin
        B_16_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        B_17_V_EN_A = 1'b1;
    end else begin
        B_17_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_18_V_EN_A = 1'b1;
    end else begin
        B_18_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_19_V_EN_A = 1'b1;
    end else begin
        B_19_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        B_1_V_EN_A = 1'b1;
    end else begin
        B_1_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_20_V_EN_A = 1'b1;
    end else begin
        B_20_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_21_V_EN_A = 1'b1;
    end else begin
        B_21_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_22_V_EN_A = 1'b1;
    end else begin
        B_22_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_23_V_EN_A = 1'b1;
    end else begin
        B_23_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_24_V_EN_A = 1'b1;
    end else begin
        B_24_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_25_V_EN_A = 1'b1;
    end else begin
        B_25_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        B_26_V_EN_A = 1'b1;
    end else begin
        B_26_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        B_2_V_EN_A = 1'b1;
    end else begin
        B_2_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        B_3_V_EN_A = 1'b1;
    end else begin
        B_3_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        B_4_V_EN_A = 1'b1;
    end else begin
        B_4_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_11001 == 1'b0))) begin
        B_5_V_EN_A = 1'b1;
    end else begin
        B_5_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        B_6_V_EN_A = 1'b1;
    end else begin
        B_6_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_11001 == 1'b0))) begin
        B_7_V_EN_A = 1'b1;
    end else begin
        B_7_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        B_8_V_EN_A = 1'b1;
    end else begin
        B_8_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_11001 == 1'b0))) begin
        B_9_V_EN_A = 1'b1;
    end else begin
        B_9_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        C_V_EN_A = 1'b1;
    end else begin
        C_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        C_V_WEN_A = 1'd1;
    end else begin
        C_V_WEN_A = 1'd0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1098_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        channel_out_phi_fu_773_p4 = channel_out_1_reg_2545;
    end else begin
        channel_out_phi_fu_773_p4 = channel_out_reg_769;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        indvar_flatten_phi_fu_751_p4 = indvar_flatten_next_reg_2440;
    end else begin
        indvar_flatten_phi_fu_751_p4 = indvar_flatten_reg_747;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_2436) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        shift_y_phi_fu_762_p4 = shift_y_cast6_mid2_v_reg_2445;
    end else begin
        shift_y_phi_fu_762_p4 = shift_y_reg_758;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_786_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_flatten_fu_1098_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_flatten_fu_1098_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((ap_block_pp0_stage12_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_Addr_A = A_V_Addr_A_orig << 32'd0;

assign A_V_Addr_B = A_V_Addr_B_orig << 32'd0;

assign A_V_Clk_A = ap_clk;

assign A_V_Clk_B = ap_clk;

assign A_V_Din_A = 8'd0;

assign A_V_Din_B = 8'd0;

assign A_V_Rst_A = ap_rst_n_inv;

assign A_V_Rst_B = ap_rst_n_inv;

assign A_V_WEN_A = 1'd0;

assign A_V_WEN_B = 1'd0;

assign B_0_V_Addr_A = B_0_V_Addr_A_orig << 32'd0;

assign B_0_V_Addr_A_orig = channel_out1_fu_1208_p1;

assign B_0_V_Clk_A = ap_clk;

assign B_0_V_Din_A = 8'd0;

assign B_0_V_Rst_A = ap_rst_n_inv;

assign B_0_V_WEN_A = 1'd0;

assign B_10_V_Addr_A = B_10_V_Addr_A_orig << 32'd0;

assign B_10_V_Addr_A_orig = channel_out1_reg_2501;

assign B_10_V_Clk_A = ap_clk;

assign B_10_V_Din_A = 8'd0;

assign B_10_V_Rst_A = ap_rst_n_inv;

assign B_10_V_WEN_A = 1'd0;

assign B_11_V_Addr_A = B_11_V_Addr_A_orig << 32'd0;

assign B_11_V_Addr_A_orig = channel_out1_reg_2501;

assign B_11_V_Clk_A = ap_clk;

assign B_11_V_Din_A = 8'd0;

assign B_11_V_Rst_A = ap_rst_n_inv;

assign B_11_V_WEN_A = 1'd0;

assign B_12_V_Addr_A = B_12_V_Addr_A_orig << 32'd0;

assign B_12_V_Addr_A_orig = channel_out1_reg_2501;

assign B_12_V_Clk_A = ap_clk;

assign B_12_V_Din_A = 8'd0;

assign B_12_V_Rst_A = ap_rst_n_inv;

assign B_12_V_WEN_A = 1'd0;

assign B_13_V_Addr_A = B_13_V_Addr_A_orig << 32'd0;

assign B_13_V_Addr_A_orig = channel_out1_reg_2501;

assign B_13_V_Clk_A = ap_clk;

assign B_13_V_Din_A = 8'd0;

assign B_13_V_Rst_A = ap_rst_n_inv;

assign B_13_V_WEN_A = 1'd0;

assign B_14_V_Addr_A = B_14_V_Addr_A_orig << 32'd0;

assign B_14_V_Addr_A_orig = channel_out1_reg_2501;

assign B_14_V_Clk_A = ap_clk;

assign B_14_V_Din_A = 8'd0;

assign B_14_V_Rst_A = ap_rst_n_inv;

assign B_14_V_WEN_A = 1'd0;

assign B_15_V_Addr_A = B_15_V_Addr_A_orig << 32'd0;

assign B_15_V_Addr_A_orig = channel_out1_reg_2501;

assign B_15_V_Clk_A = ap_clk;

assign B_15_V_Din_A = 8'd0;

assign B_15_V_Rst_A = ap_rst_n_inv;

assign B_15_V_WEN_A = 1'd0;

assign B_16_V_Addr_A = B_16_V_Addr_A_orig << 32'd0;

assign B_16_V_Addr_A_orig = channel_out1_reg_2501;

assign B_16_V_Clk_A = ap_clk;

assign B_16_V_Din_A = 8'd0;

assign B_16_V_Rst_A = ap_rst_n_inv;

assign B_16_V_WEN_A = 1'd0;

assign B_17_V_Addr_A = B_17_V_Addr_A_orig << 32'd0;

assign B_17_V_Addr_A_orig = channel_out1_reg_2501;

assign B_17_V_Clk_A = ap_clk;

assign B_17_V_Din_A = 8'd0;

assign B_17_V_Rst_A = ap_rst_n_inv;

assign B_17_V_WEN_A = 1'd0;

assign B_18_V_Addr_A = B_18_V_Addr_A_orig << 32'd0;

assign B_18_V_Addr_A_orig = channel_out1_reg_2501;

assign B_18_V_Clk_A = ap_clk;

assign B_18_V_Din_A = 8'd0;

assign B_18_V_Rst_A = ap_rst_n_inv;

assign B_18_V_WEN_A = 1'd0;

assign B_19_V_Addr_A = B_19_V_Addr_A_orig << 32'd0;

assign B_19_V_Addr_A_orig = channel_out1_reg_2501;

assign B_19_V_Clk_A = ap_clk;

assign B_19_V_Din_A = 8'd0;

assign B_19_V_Rst_A = ap_rst_n_inv;

assign B_19_V_WEN_A = 1'd0;

assign B_1_V_Addr_A = B_1_V_Addr_A_orig << 32'd0;

assign B_1_V_Addr_A_orig = channel_out1_fu_1208_p1;

assign B_1_V_Clk_A = ap_clk;

assign B_1_V_Din_A = 8'd0;

assign B_1_V_Rst_A = ap_rst_n_inv;

assign B_1_V_WEN_A = 1'd0;

assign B_20_V_Addr_A = B_20_V_Addr_A_orig << 32'd0;

assign B_20_V_Addr_A_orig = channel_out1_reg_2501;

assign B_20_V_Clk_A = ap_clk;

assign B_20_V_Din_A = 8'd0;

assign B_20_V_Rst_A = ap_rst_n_inv;

assign B_20_V_WEN_A = 1'd0;

assign B_21_V_Addr_A = B_21_V_Addr_A_orig << 32'd0;

assign B_21_V_Addr_A_orig = channel_out1_reg_2501;

assign B_21_V_Clk_A = ap_clk;

assign B_21_V_Din_A = 8'd0;

assign B_21_V_Rst_A = ap_rst_n_inv;

assign B_21_V_WEN_A = 1'd0;

assign B_22_V_Addr_A = B_22_V_Addr_A_orig << 32'd0;

assign B_22_V_Addr_A_orig = channel_out1_reg_2501;

assign B_22_V_Clk_A = ap_clk;

assign B_22_V_Din_A = 8'd0;

assign B_22_V_Rst_A = ap_rst_n_inv;

assign B_22_V_WEN_A = 1'd0;

assign B_23_V_Addr_A = B_23_V_Addr_A_orig << 32'd0;

assign B_23_V_Addr_A_orig = channel_out1_reg_2501;

assign B_23_V_Clk_A = ap_clk;

assign B_23_V_Din_A = 8'd0;

assign B_23_V_Rst_A = ap_rst_n_inv;

assign B_23_V_WEN_A = 1'd0;

assign B_24_V_Addr_A = B_24_V_Addr_A_orig << 32'd0;

assign B_24_V_Addr_A_orig = channel_out1_reg_2501;

assign B_24_V_Clk_A = ap_clk;

assign B_24_V_Din_A = 8'd0;

assign B_24_V_Rst_A = ap_rst_n_inv;

assign B_24_V_WEN_A = 1'd0;

assign B_25_V_Addr_A = B_25_V_Addr_A_orig << 32'd0;

assign B_25_V_Addr_A_orig = channel_out1_reg_2501;

assign B_25_V_Clk_A = ap_clk;

assign B_25_V_Din_A = 8'd0;

assign B_25_V_Rst_A = ap_rst_n_inv;

assign B_25_V_WEN_A = 1'd0;

assign B_26_V_Addr_A = B_26_V_Addr_A_orig << 32'd0;

assign B_26_V_Addr_A_orig = channel_out1_reg_2501;

assign B_26_V_Clk_A = ap_clk;

assign B_26_V_Din_A = 8'd0;

assign B_26_V_Rst_A = ap_rst_n_inv;

assign B_26_V_WEN_A = 1'd0;

assign B_2_V_Addr_A = B_2_V_Addr_A_orig << 32'd0;

assign B_2_V_Addr_A_orig = channel_out1_reg_2501;

assign B_2_V_Clk_A = ap_clk;

assign B_2_V_Din_A = 8'd0;

assign B_2_V_Rst_A = ap_rst_n_inv;

assign B_2_V_WEN_A = 1'd0;

assign B_3_V_Addr_A = B_3_V_Addr_A_orig << 32'd0;

assign B_3_V_Addr_A_orig = channel_out1_reg_2501;

assign B_3_V_Clk_A = ap_clk;

assign B_3_V_Din_A = 8'd0;

assign B_3_V_Rst_A = ap_rst_n_inv;

assign B_3_V_WEN_A = 1'd0;

assign B_4_V_Addr_A = B_4_V_Addr_A_orig << 32'd0;

assign B_4_V_Addr_A_orig = channel_out1_reg_2501;

assign B_4_V_Clk_A = ap_clk;

assign B_4_V_Din_A = 8'd0;

assign B_4_V_Rst_A = ap_rst_n_inv;

assign B_4_V_WEN_A = 1'd0;

assign B_5_V_Addr_A = B_5_V_Addr_A_orig << 32'd0;

assign B_5_V_Addr_A_orig = channel_out1_reg_2501;

assign B_5_V_Clk_A = ap_clk;

assign B_5_V_Din_A = 8'd0;

assign B_5_V_Rst_A = ap_rst_n_inv;

assign B_5_V_WEN_A = 1'd0;

assign B_6_V_Addr_A = B_6_V_Addr_A_orig << 32'd0;

assign B_6_V_Addr_A_orig = channel_out1_reg_2501;

assign B_6_V_Clk_A = ap_clk;

assign B_6_V_Din_A = 8'd0;

assign B_6_V_Rst_A = ap_rst_n_inv;

assign B_6_V_WEN_A = 1'd0;

assign B_7_V_Addr_A = B_7_V_Addr_A_orig << 32'd0;

assign B_7_V_Addr_A_orig = channel_out1_reg_2501;

assign B_7_V_Clk_A = ap_clk;

assign B_7_V_Din_A = 8'd0;

assign B_7_V_Rst_A = ap_rst_n_inv;

assign B_7_V_WEN_A = 1'd0;

assign B_8_V_Addr_A = B_8_V_Addr_A_orig << 32'd0;

assign B_8_V_Addr_A_orig = channel_out1_reg_2501;

assign B_8_V_Clk_A = ap_clk;

assign B_8_V_Din_A = 8'd0;

assign B_8_V_Rst_A = ap_rst_n_inv;

assign B_8_V_WEN_A = 1'd0;

assign B_9_V_Addr_A = B_9_V_Addr_A_orig << 32'd0;

assign B_9_V_Addr_A_orig = channel_out1_reg_2501;

assign B_9_V_Clk_A = ap_clk;

assign B_9_V_Din_A = 8'd0;

assign B_9_V_Rst_A = ap_rst_n_inv;

assign B_9_V_WEN_A = 1'd0;

assign C_V_Addr_A = C_V_Addr_A_orig << 32'd0;

assign C_V_Addr_A_orig = tmp_7_fu_2125_p1;

assign C_V_Clk_A = ap_clk;

assign C_V_Din_A = {{grp_fu_2363_p3[11:4]}};

assign C_V_Rst_A = ap_rst_n_inv;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign center_x_fu_792_p2 = (shift_x_reg_725 + 8'd1);

assign center_y_fu_1124_p2 = (shift_y_phi_fu_762_p4 + 8'd1);

assign channel_out1_fu_1208_p1 = channel_out_mid2_fu_1116_p3;

assign channel_out_1_fu_1214_p2 = (channel_out_mid2_fu_1116_p3 + 6'd1);

assign channel_out_mid2_fu_1116_p3 = ((tmp_3_fu_1110_p2[0:0] === 1'b1) ? 6'd0 : channel_out_phi_fu_773_p4);

assign exitcond_flatten_fu_1098_p2 = ((indvar_flatten_phi_fu_751_p4 == 13'd7104) ? 1'b1 : 1'b0);

assign grp_fu_2129_p0 = grp_fu_2129_p00;

assign grp_fu_2129_p00 = channel_out_mid2_fu_1116_p3;

assign grp_fu_2129_p1 = 21'd49284;

assign grp_fu_2129_p2 = grp_fu_2129_p20;

assign grp_fu_2129_p20 = shift_y_cast6_mid2_v_fu_1130_p3;

assign grp_fu_2138_p2 = {{tmp_1_fu_1264_p4}, {4'd0}};

assign grp_fu_2147_p2 = {{tmp_4_reg_2560}, {4'd0}};

assign grp_fu_2156_p2 = {{tmp_6_fu_1342_p4}, {4'd0}};

assign grp_fu_2165_p2 = {{tmp_8_reg_2585}, {4'd0}};

assign grp_fu_2174_p2 = {{tmp_9_fu_1413_p4}, {4'd0}};

assign grp_fu_2183_p2 = {{tmp_10_reg_2610}, {4'd0}};

assign grp_fu_2192_p2 = {{tmp_11_fu_1480_p4}, {4'd0}};

assign grp_fu_2201_p2 = {{tmp_12_reg_2635}, {4'd0}};

assign grp_fu_2210_p2 = {{tmp_13_fu_1549_p4}, {4'd0}};

assign grp_fu_2219_p2 = {{tmp_14_reg_2660}, {4'd0}};

assign grp_fu_2228_p2 = {{tmp_15_fu_1612_p4}, {4'd0}};

assign grp_fu_2237_p2 = {{tmp_16_reg_2685}, {4'd0}};

assign grp_fu_2246_p2 = {{tmp_17_fu_1675_p4}, {4'd0}};

assign grp_fu_2255_p2 = {{tmp_18_reg_2710}, {4'd0}};

assign grp_fu_2264_p2 = {{tmp_19_fu_1744_p4}, {4'd0}};

assign grp_fu_2273_p2 = {{tmp_20_reg_2735}, {4'd0}};

assign grp_fu_2282_p2 = {{tmp_21_fu_1827_p4}, {4'd0}};

assign grp_fu_2291_p2 = {{tmp_22_reg_2779}, {4'd0}};

assign grp_fu_2300_p2 = {{tmp_23_fu_1890_p4}, {4'd0}};

assign grp_fu_2309_p2 = {{tmp_24_reg_2839}, {4'd0}};

assign grp_fu_2318_p2 = {{tmp_25_fu_1957_p4}, {4'd0}};

assign grp_fu_2327_p2 = {{tmp_26_reg_2884}, {4'd0}};

assign grp_fu_2336_p2 = {{tmp_27_fu_2018_p4}, {4'd0}};

assign grp_fu_2345_p2 = {{tmp_28_reg_2899}, {4'd0}};

assign grp_fu_2354_p2 = {{tmp_29_fu_2075_p4}, {4'd0}};

assign grp_fu_2363_p2 = {{tmp_30_reg_2914}, {4'd0}};

assign indvar_flatten_next_fu_1104_p2 = (indvar_flatten_phi_fu_751_p4 + 13'd1);

assign next_mul_fu_780_p2 = (output_x_coords_reg_736 + 16'd222);

assign output_coords_fu_1204_p2 = (grp_fu_2129_p3 + output_x_coords_cast_reg_2386);

assign output_x_coords_cast_fu_806_p1 = output_x_coords_reg_736;

assign p_Val2_1_fu_1250_p0 = B_0_V_Dout_A;

assign p_Val2_1_fu_1250_p1 = A_V_Dout_A;

assign p_Val2_1_fu_1250_p2 = ($signed(p_Val2_1_fu_1250_p0) * $signed(p_Val2_1_fu_1250_p1));

assign p_shl13_0_1_cast_fu_848_p1 = p_shl13_0_1_fu_840_p3;

assign p_shl13_0_1_fu_840_p3 = {{center_x_fu_792_p2}, {8'd0}};

assign p_shl13_0_2_cast_fu_884_p1 = p_shl13_0_2_fu_876_p3;

assign p_shl13_0_2_fu_876_p3 = {{tmp_8_0_2_fu_870_p2}, {8'd0}};

assign p_shl13_1_1_fu_944_p3 = {{tmp_8_1_1_fu_938_p2}, {8'd0}};

assign p_shl13_1_2_fu_976_p3 = {{tmp_8_1_2_fu_970_p2}, {8'd0}};

assign p_shl13_1_fu_912_p3 = {{tmp_8_1_fu_906_p2}, {8'd0}};

assign p_shl13_2_1_fu_1040_p3 = {{tmp_8_2_1_fu_1034_p2}, {8'd0}};

assign p_shl13_2_2_fu_1072_p3 = {{tmp_8_2_2_fu_1066_p2}, {8'd0}};

assign p_shl13_2_fu_1008_p3 = {{tmp_8_2_fu_1002_p2}, {8'd0}};

assign p_shl13_cast_fu_818_p1 = p_shl_fu_810_p3;

assign p_shl14_0_1_cast_fu_860_p1 = p_shl14_0_1_fu_852_p3;

assign p_shl14_0_1_fu_852_p3 = {{center_x_fu_792_p2}, {5'd0}};

assign p_shl14_0_2_cast_fu_896_p1 = p_shl14_0_2_fu_888_p3;

assign p_shl14_0_2_fu_888_p3 = {{tmp_8_0_2_fu_870_p2}, {5'd0}};

assign p_shl14_1_1_cast_fu_960_p1 = p_shl14_1_1_fu_952_p3;

assign p_shl14_1_1_fu_952_p3 = {{tmp_8_1_1_fu_938_p2}, {5'd0}};

assign p_shl14_1_2_cast_fu_992_p1 = p_shl14_1_2_fu_984_p3;

assign p_shl14_1_2_fu_984_p3 = {{tmp_8_1_2_fu_970_p2}, {5'd0}};

assign p_shl14_1_cast_fu_928_p1 = p_shl14_1_fu_920_p3;

assign p_shl14_1_fu_920_p3 = {{tmp_8_1_fu_906_p2}, {5'd0}};

assign p_shl14_2_1_cast_fu_1056_p1 = p_shl14_2_1_fu_1048_p3;

assign p_shl14_2_1_fu_1048_p3 = {{tmp_8_2_1_fu_1034_p2}, {5'd0}};

assign p_shl14_2_2_cast_fu_1088_p1 = p_shl14_2_2_fu_1080_p3;

assign p_shl14_2_2_fu_1080_p3 = {{tmp_8_2_2_fu_1066_p2}, {5'd0}};

assign p_shl14_2_cast_fu_1024_p1 = p_shl14_2_fu_1016_p3;

assign p_shl14_2_fu_1016_p3 = {{tmp_8_2_fu_1002_p2}, {5'd0}};

assign p_shl14_cast_fu_830_p1 = p_shl1_fu_822_p3;

assign p_shl1_fu_822_p3 = {{shift_x_reg_725}, {5'd0}};

assign p_shl_fu_810_p3 = {{shift_x_reg_725}, {8'd0}};

assign shift_x_cast1_fu_798_p1 = shift_x_reg_725;

assign shift_x_cast_fu_802_p1 = shift_x_reg_725;

assign shift_y_cast6_mid2_v_fu_1130_p3 = ((tmp_3_fu_1110_p2[0:0] === 1'b1) ? center_y_fu_1124_p2 : shift_y_phi_fu_762_p4);

assign tmp_10_0_1_fu_864_p2 = (p_shl13_0_1_cast_fu_848_p1 - p_shl14_0_1_cast_fu_860_p1);

assign tmp_10_0_2_fu_900_p2 = (p_shl13_0_2_cast_fu_884_p1 - p_shl14_0_2_cast_fu_896_p1);

assign tmp_10_1_1_fu_964_p2 = (p_shl13_1_1_fu_944_p3 - p_shl14_1_1_cast_fu_960_p1);

assign tmp_10_1_2_fu_996_p2 = (p_shl13_1_2_fu_976_p3 - p_shl14_1_2_cast_fu_992_p1);

assign tmp_10_1_fu_932_p2 = (p_shl13_1_fu_912_p3 - p_shl14_1_cast_fu_928_p1);

assign tmp_10_2_1_fu_1060_p2 = (p_shl13_2_1_fu_1040_p3 - p_shl14_2_1_cast_fu_1056_p1);

assign tmp_10_2_2_fu_1092_p2 = (p_shl13_2_2_fu_1072_p3 - p_shl14_2_2_cast_fu_1088_p1);

assign tmp_10_2_fu_1028_p2 = (p_shl13_2_fu_1008_p3 - p_shl14_2_cast_fu_1024_p1);

assign tmp_11_fu_1480_p4 = {{grp_fu_2183_p3[11:4]}};

assign tmp_13_fu_1549_p4 = {{grp_fu_2201_p3[11:4]}};

assign tmp_14_0_0_1_mid2_fu_1170_p1 = $unsigned(tmp_14_0_0_1_mid2_v_fu_1166_p1);

assign tmp_14_0_0_1_mid2_v_fu_1166_p1 = $signed(tmp_14_0_0_1_mid2_v_s_fu_1160_p2);

assign tmp_14_0_0_1_mid2_v_s_fu_1160_p2 = (tmp_14_mid2_v_v_fu_1146_p2 + 17'd1);

assign tmp_14_0_0_2_mid2_fu_1229_p1 = $unsigned(tmp_14_0_0_2_mid2_v_fu_1225_p1);

assign tmp_14_0_0_2_mid2_v_fu_1225_p1 = $signed(tmp_14_0_0_2_mid2_v_s_fu_1220_p2);

assign tmp_14_0_0_2_mid2_v_s_fu_1220_p2 = (tmp_14_mid2_v_v_reg_2451 + 17'd2);

assign tmp_14_0_1_1_mid2_fu_1300_p1 = $unsigned(tmp_14_0_1_1_mid2_v_fu_1296_p1);

assign tmp_14_0_1_1_mid2_v_fu_1296_p1 = $signed(tmp_14_0_1_1_mid2_v_s_fu_1291_p2);

assign tmp_14_0_1_1_mid2_v_s_fu_1291_p2 = (tmp_14_0_1_mid2_v_v_reg_2456 + 17'd1);

assign tmp_14_0_1_2_mid2_fu_1314_p1 = $unsigned(tmp_14_0_1_2_mid2_v_fu_1310_p1);

assign tmp_14_0_1_2_mid2_v_fu_1310_p1 = $signed(tmp_14_0_1_2_mid2_v_s_fu_1305_p2);

assign tmp_14_0_1_2_mid2_v_s_fu_1305_p2 = (tmp_14_0_1_mid2_v_v_reg_2456 + 17'd2);

assign tmp_14_0_1_mid2_fu_1237_p1 = $unsigned(tmp_14_0_1_mid2_v_fu_1234_p1);

assign tmp_14_0_1_mid2_v_fu_1234_p1 = $signed(tmp_14_0_1_mid2_v_v_reg_2456);

assign tmp_14_0_1_mid2_v_v_fu_1175_p2 = (tmp_10_0_1_reg_2396 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_0_2_1_mid2_fu_1385_p1 = $unsigned(tmp_14_0_2_1_mid2_v_fu_1381_p1);

assign tmp_14_0_2_1_mid2_v_fu_1381_p1 = $signed(tmp_14_0_2_1_mid2_v_s_fu_1376_p2);

assign tmp_14_0_2_1_mid2_v_s_fu_1376_p2 = (tmp_14_0_2_mid2_v_v_reg_2463 + 17'd1);

assign tmp_14_0_2_2_mid2_fu_1448_p1 = $unsigned(tmp_14_0_2_2_mid2_v_fu_1444_p1);

assign tmp_14_0_2_2_mid2_v_fu_1444_p1 = $signed(tmp_14_0_2_2_mid2_v_s_fu_1439_p2);

assign tmp_14_0_2_2_mid2_v_s_fu_1439_p2 = (tmp_14_0_2_mid2_v_v_reg_2463 + 17'd2);

assign tmp_14_0_2_mid2_fu_1371_p1 = $unsigned(tmp_14_0_2_mid2_v_fu_1368_p1);

assign tmp_14_0_2_mid2_v_fu_1368_p1 = $signed(tmp_14_0_2_mid2_v_v_reg_2463);

assign tmp_14_0_2_mid2_v_v_fu_1180_p2 = (tmp_10_0_2_reg_2401 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_1_0_1_mid2_fu_1511_p1 = tmp_14_1_0_1_mid2_v_fu_1506_p2;

assign tmp_14_1_0_1_mid2_v_fu_1506_p2 = (tmp_14_1_mid2_v_reg_2470 + 17'd1);

assign tmp_14_1_0_2_mid2_fu_1521_p1 = tmp_14_1_0_2_mid2_v_fu_1516_p2;

assign tmp_14_1_0_2_mid2_v_fu_1516_p2 = (tmp_14_1_mid2_v_reg_2470 + 17'd2);

assign tmp_14_1_1_1_mid2_fu_1584_p1 = tmp_14_1_1_1_mid2_v_fu_1579_p2;

assign tmp_14_1_1_1_mid2_v_fu_1579_p2 = (tmp_14_1_1_mid2_v_reg_2477 + 17'd1);

assign tmp_14_1_1_2_mid2_fu_1643_p1 = tmp_14_1_1_2_mid2_v_fu_1638_p2;

assign tmp_14_1_1_2_mid2_v_fu_1638_p2 = (tmp_14_1_1_mid2_v_reg_2477 + 17'd2);

assign tmp_14_1_1_mid2_fu_1575_p1 = tmp_14_1_1_mid2_v_reg_2477;

assign tmp_14_1_1_mid2_v_fu_1190_p2 = (tmp_10_1_1_reg_2411 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_1_2_1_mid2_fu_1706_p1 = tmp_14_1_2_1_mid2_v_fu_1701_p2;

assign tmp_14_1_2_1_mid2_v_fu_1701_p2 = (tmp_14_1_2_mid2_v_reg_2484 + 17'd1);

assign tmp_14_1_2_2_mid2_fu_1716_p1 = tmp_14_1_2_2_mid2_v_fu_1711_p2;

assign tmp_14_1_2_2_mid2_v_fu_1711_p2 = (tmp_14_1_2_mid2_v_reg_2484 + 17'd2);

assign tmp_14_1_2_mid2_fu_1648_p1 = tmp_14_1_2_mid2_v_reg_2484;

assign tmp_14_1_2_mid2_v_fu_1195_p2 = (tmp_10_1_2_reg_2416 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_1_mid2_fu_1453_p1 = tmp_14_1_mid2_v_reg_2470;

assign tmp_14_1_mid2_v_fu_1185_p2 = (tmp_10_1_reg_2406 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_2_0_1_mid2_fu_1789_p1 = tmp_14_2_0_1_mid2_v_fu_1783_p2;

assign tmp_14_2_0_1_mid2_v_fu_1783_p2 = (tmp_14_2_mid2_v_fu_1773_p2 + 18'd1);

assign tmp_14_2_0_2_mid2_fu_1858_p1 = tmp_14_2_0_2_mid2_v_fu_1853_p2;

assign tmp_14_2_0_2_mid2_v_fu_1853_p2 = (tmp_14_2_mid2_v_reg_2750 + 18'd2);

assign tmp_14_2_1_1_mid2_fu_1921_p1 = tmp_14_2_1_1_mid2_v_fu_1916_p2;

assign tmp_14_2_1_1_mid2_v_fu_1916_p2 = (tmp_14_2_1_mid2_v_reg_2755 + 18'd1);

assign tmp_14_2_1_2_mid2_fu_1931_p1 = tmp_14_2_1_2_mid2_v_fu_1926_p2;

assign tmp_14_2_1_2_mid2_v_fu_1926_p2 = (tmp_14_2_1_mid2_v_reg_2755 + 18'd2);

assign tmp_14_2_1_mid2_fu_1863_p1 = tmp_14_2_1_mid2_v_reg_2755;

assign tmp_14_2_1_mid2_v_fu_1794_p2 = (tmp_10_2_1_reg_2426 + tmp_14_2_mid2_v_v_fu_1770_p1);

assign tmp_14_2_2_1_mid2_fu_1992_p1 = tmp_14_2_2_1_mid2_v_fu_1987_p2;

assign tmp_14_2_2_1_mid2_v_fu_1987_p2 = (tmp_14_2_2_mid2_v_reg_2762 + 18'd1);

assign tmp_14_2_2_2_mid2_fu_2049_p1 = tmp_14_2_2_2_mid2_v_fu_2044_p2;

assign tmp_14_2_2_2_mid2_v_fu_2044_p2 = (tmp_14_2_2_mid2_v_reg_2762 + 18'd2);

assign tmp_14_2_2_mid2_fu_1983_p1 = tmp_14_2_2_mid2_v_reg_2762;

assign tmp_14_2_2_mid2_v_fu_1799_p2 = (tmp_10_2_2_reg_2431 + tmp_14_2_mid2_v_v_fu_1770_p1);

assign tmp_14_2_mid2_fu_1778_p1 = tmp_14_2_mid2_v_fu_1773_p2;

assign tmp_14_2_mid2_v_fu_1773_p2 = (tmp_10_2_reg_2421 + tmp_14_2_mid2_v_v_fu_1770_p1);

assign tmp_14_2_mid2_v_v_fu_1770_p1 = shift_y_cast6_mid2_v_reg_2445;

assign tmp_14_mid2_fu_1155_p1 = $unsigned(tmp_14_mid2_v_fu_1151_p1);

assign tmp_14_mid2_v_fu_1151_p1 = $signed(tmp_14_mid2_v_v_fu_1146_p2);

assign tmp_14_mid2_v_v_fu_1146_p2 = (tmp_s_reg_2391 + tmp_14_mid2_v_v_v_fu_1142_p1);

assign tmp_14_mid2_v_v_v_fu_1142_p1 = shift_y_cast6_mid2_v_fu_1130_p3;

assign tmp_15_fu_1612_p4 = {{grp_fu_2219_p3[11:4]}};

assign tmp_17_fu_1675_p4 = {{grp_fu_2237_p3[11:4]}};

assign tmp_19_fu_1744_p4 = {{grp_fu_2255_p3[11:4]}};

assign tmp_1_fu_1264_p4 = {{p_Val2_1_fu_1250_p2[11:4]}};

assign tmp_21_fu_1827_p4 = {{grp_fu_2273_p3[11:4]}};

assign tmp_23_fu_1890_p4 = {{grp_fu_2291_p3[11:4]}};

assign tmp_25_fu_1957_p4 = {{grp_fu_2309_p3[11:4]}};

assign tmp_27_fu_2018_p4 = {{grp_fu_2327_p3[11:4]}};

assign tmp_29_fu_2075_p4 = {{grp_fu_2345_p3[11:4]}};

assign tmp_3_fu_1110_p2 = ((channel_out_phi_fu_773_p4 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_6_fu_1342_p4 = {{grp_fu_2147_p3[11:4]}};

assign tmp_7_fu_2125_p1 = output_coords_reg_2491;

assign tmp_8_0_2_fu_870_p2 = (shift_x_reg_725 + 8'd2);

assign tmp_8_1_1_fu_938_p2 = (shift_x_cast_fu_802_p1 + 9'd225);

assign tmp_8_1_2_fu_970_p2 = (shift_x_cast_fu_802_p1 + 9'd226);

assign tmp_8_1_fu_906_p2 = (shift_x_cast_fu_802_p1 + 9'd224);

assign tmp_8_2_1_fu_1034_p2 = (shift_x_cast1_fu_798_p1 + 10'd449);

assign tmp_8_2_2_fu_1066_p2 = (shift_x_cast1_fu_798_p1 + 10'd450);

assign tmp_8_2_fu_1002_p2 = (shift_x_cast1_fu_798_p1 + 10'd448);

assign tmp_9_fu_1413_p4 = {{grp_fu_2165_p3[11:4]}};

assign tmp_fu_786_p2 = ((shift_x_reg_725 == 8'd222) ? 1'b1 : 1'b0);

assign tmp_s_fu_834_p2 = (p_shl13_cast_fu_818_p1 - p_shl14_cast_fu_830_p1);

always @ (posedge ap_clk) begin
    output_x_coords_cast_reg_2386[20:16] <= 5'b00000;
    tmp_s_reg_2391[4:0] <= 5'b00000;
    tmp_10_0_1_reg_2396[4:0] <= 5'b00000;
    tmp_10_0_2_reg_2401[4:0] <= 5'b00000;
    tmp_10_1_reg_2406[4:0] <= 5'b00000;
    tmp_10_1_1_reg_2411[4:0] <= 5'b00000;
    tmp_10_1_2_reg_2416[4:0] <= 5'b00000;
    tmp_10_2_reg_2421[4:0] <= 5'b00000;
    tmp_10_2_1_reg_2426[4:0] <= 5'b00000;
    tmp_10_2_2_reg_2431[4:0] <= 5'b00000;
    channel_out1_reg_2501[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //macc_par_convs
